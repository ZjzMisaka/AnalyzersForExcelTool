{"name":"diff","code":"using ClosedXML.Excel;\r\nusing GlobalObjects;\r\nusing System;\r\nusing System.Collections.Concurrent;\r\nusing System.Collections.Generic;\r\nusing Diff;\r\n\r\nnamespace AnalyzeCode\r\n{\r\n    class Analyze\r\n    {\r\n        /// <summary>\r\n        /// 在所有分析前调用\r\n        /// </summary>\r\n        /// <param name=\"paramDic\">传入的参数</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"allFilePathList\">将会分析的所有文件路径列表</param>\r\n        public void RunBeforeAnalyzeSheet(Dictionary<string, string> paramDic, ref Object globalObject, List<string> allFilePathList)\r\n        {\r\n            Logger.Info(\"RunBeforeAnalyze\");\r\n            Dictionary<string, Dictionary<string, Tuple<List<IXLRow>, List<double>, List<IXLRange>>>> rowsDic = new Dictionary<string, Dictionary<string, Tuple<List<IXLRow>, List<double>, List<IXLRange>>>>();\r\n            Dictionary<string, Tuple<List<IXLRow>, List<double>, List<IXLRange>>> dic1 = new Dictionary<string, Tuple<List<IXLRow>, List<double>, List<IXLRange>>>();\r\n            Dictionary<string, Tuple<List<IXLRow>, List<double>, List<IXLRange>>> dic2 = new Dictionary<string, Tuple<List<IXLRow>, List<double>, List<IXLRange>>>();\r\n            Logger.Info(\"Diff \" + allFilePathList.Count.ToString() + \"files\");\r\n            rowsDic.Add(allFilePathList[0], dic1);\r\n            Logger.Info(allFilePathList[0]);\r\n            rowsDic.Add(allFilePathList[1], dic2);\r\n            Logger.Info(allFilePathList[1]);\r\n            \r\n            globalObject = rowsDic;\r\n        }\r\n\r\n        /// <summary>\r\n        /// 分析一个sheet\r\n        /// </summary>\r\n        /// <param name=\"paramDic\">传入的参数</param>\r\n        /// <param name=\"sheet\">被分析的sheet</param>\r\n        /// <param name=\"result\">存储当前文件的信息 ResultType { (String) FILEPATH [文件路径], (String) FILENAME [文件名], (String) MESSAGE [当查找时出现问题时输出的消息], (Object) RESULTOBJECT [用户自定的分析结果] }</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"invokeCount\">此分析函数被调用的次数</param>\r\n        public void AnalyzeSheet(Dictionary<string, string> paramDic, IXLWorksheet sheet, ConcurrentDictionary<ResultType, Object> result, ref Object globalObject, int invokeCount)\r\n        {\r\n            Logger.Info(\"AnalyzeSheet: \" + invokeCount);\r\n            \r\n            IXLRow lastUsedRow = sheet.LastRowUsed();\r\n            int lastRowNum = lastUsedRow == null ? 0 : sheet.LastRowUsed().RowNumber();\r\n            List<IXLRow> rows = new List<IXLRow>();\r\n            List<IXLRange> mergeRangeList = new List<IXLRange>();\r\n            int lastUsedColNum = 0;\r\n            for(int i = 1; i <= lastRowNum; ++i)\r\n            {\r\n                IXLRow row = sheet.Row(i);\r\n                rows.Add(row);\r\n                \r\n                IXLCell lastUsedCell = row.LastCellUsed();\r\n                \r\n                int rowLastCellUsedColumnNumber = lastUsedCell == null ? 0 : lastUsedCell.Address.ColumnNumber;\r\n                if(lastUsedCell != null && lastUsedCell.IsMerged())\r\n                {\r\n                    rowLastCellUsedColumnNumber += lastUsedCell.MergedRange().ColumnCount() - 1;\r\n                }\r\n                \r\n                IXLCells usedCells = row.CellsUsed();\r\n                \r\n                if(usedCells != null)\r\n                {\r\n                    foreach (IXLCell cell in usedCells)\r\n                    {\r\n                        if(cell.IsMerged())\r\n                        {\r\n                            IXLRange range = cell.MergedRange();\r\n                            if(!mergeRangeList.Contains(range))\r\n                            {\r\n                                mergeRangeList.Add(range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                lastUsedColNum = rowLastCellUsedColumnNumber > lastUsedColNum ? rowLastCellUsedColumnNumber : lastUsedColNum;\r\n            }\r\n            \r\n            List<double> widthList = new List<double>();\r\n            for(int j = 1; j <= lastUsedColNum; ++j)\r\n            {\r\n                widthList.Add(sheet.Column(j).Width);\r\n            }\r\n            \r\n            ((Dictionary<string, Dictionary<string, Tuple<List<IXLRow>, List<double>, List<IXLRange>>>>)globalObject)[(string)result[ResultType.FILEPATH]].Add(sheet.Name, new Tuple<List<IXLRow>, List<double>, List<IXLRange>>(rows, widthList, mergeRangeList));\r\n        }\r\n\r\n        /// <summary>\r\n        /// 在所有输出前调用\r\n        /// </summary>\r\n        /// <param name=\"paramDic\">传入的参数</param>\r\n        /// <param name=\"workbook\">用于输出的excel文件</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"resultList\">所有文件的信息</param>\r\n        /// <param name=\"allFilePathList\">分析的所有文件路径列表</param>\r\n        public void RunBeforeSetResult(Dictionary<string, string> paramDic, XLWorkbook workbook, ref Object globalObject, ICollection<ConcurrentDictionary<ResultType, Object>> resultList, List<string> allFilePathList)\r\n        {\r\n            \r\n        }\r\n\r\n        /// <summary>\r\n        /// 根据分析结果输出到excel中\r\n        /// </summary>\r\n        /// <param name=\"paramDic\">传入的参数</param>\r\n        /// <param name=\"workbook\">用于输出的excel文件</param>\r\n        /// <param name=\"result\">存储当前文件的信息 ResultType { (String) FILEPATH [文件路径], (String) FILENAME [文件名], (String) MESSAGE [当查找时出现问题时输出的消息], (Object) RESULTOBJECT [用户自定的分析结果] }</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"invokeCount\">此输出函数被调用的次数</param>\r\n        /// <param name=\"totalCount\">总共需要调用的输出函数的次数</param>\r\n        public void SetResult(Dictionary<string, string> paramDic, XLWorkbook workbook, ConcurrentDictionary<ResultType, Object> result, ref Object globalObject, int invokeCount, int totalCount)\r\n        {\r\n            \r\n        }\r\n\r\n        /// <summary>\r\n        /// 所有调用结束后调用\r\n        /// </summary>\r\n        /// <param name=\"paramDic\">传入的参数</param>\r\n        /// <param name=\"workbook\">用于输出的excel文件</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"resultList\">所有文件的信息</param>\r\n        /// <param name=\"allFilePathList\">分析的所有文件路径列表</param>\r\n        public void RunEnd(Dictionary<string, string> paramDic, XLWorkbook workbook, ref Object globalObject, ICollection<ConcurrentDictionary<ResultType, Object>> resultList, List<string> allFilePathList)\r\n        {\r\n            Logger.Info(\"RunEnd\");\r\n            \r\n            Dictionary<string, Dictionary<string, Tuple<List<IXLRow>, List<double>, List<IXLRange>>>> rowsDic = (Dictionary<string, Dictionary<string, Tuple<List<IXLRow>, List<double>, List<IXLRange>>>>)globalObject;\r\n            \r\n            IXLWorksheet sheet = workbook.AddWorksheet(\"DiffRes\");\r\n            sheet.Cell(1, 2).Value = \"+\";\r\n            sheet.Cell(1, 2).Style.Border.OutsideBorder = XLBorderStyleValues.Medium;\r\n            sheet.Cell(1, 2).Style.Fill.BackgroundColor = XLColor.BlueGreen;\r\n            sheet.Cell(1, 2).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\r\n            sheet.Cell(1, 3).Value = \"-\";\r\n            sheet.Cell(1, 3).Style.Border.OutsideBorder = XLBorderStyleValues.Medium;\r\n            sheet.Cell(1, 3).Style.Fill.BackgroundColor = XLColor.BlueGreen;\r\n            sheet.Cell(1, 3).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\r\n            int sheetNowRow = 2;\r\n            \r\n            List<ConcurrentDictionary<ResultType, Object>> listTemp = new List<ConcurrentDictionary<ResultType, object>>();\r\n            foreach (ConcurrentDictionary<ResultType, Object> res in resultList)\r\n            {\r\n                listTemp.Add(res);\r\n            }\r\n            \r\n            Dictionary<string, Tuple<List<IXLRow>, List<double>, List<IXLRange>>> origSheetsRows = rowsDic[allFilePathList[0]];\r\n            Dictionary<string, Tuple<List<IXLRow>, List<double>, List<IXLRange>>> revSheetsRows = rowsDic[allFilePathList[1]];\r\n            \r\n            List<string> sheetNames = new List<string>();\r\n            foreach (string name in origSheetsRows.Keys)\r\n            {\r\n                if(!sheetNames.Contains(name))\r\n                {\r\n                    sheetNames.Add(name);\r\n                }\r\n            }\r\n            foreach (string name in revSheetsRows.Keys)\r\n            {\r\n                if(!sheetNames.Contains(name))\r\n                {\r\n                    sheetNames.Add(name);\r\n                }\r\n            }\r\n            \r\n            foreach(string name in sheetNames)\r\n            {\r\n                Logger.Info(\"Diff: \" + name + \", total: \" + sheetNames.Count + \"sheets\");\r\n                \r\n                if(!origSheetsRows.ContainsKey(name) || !revSheetsRows.ContainsKey(name))\r\n                {\r\n                    continue;\r\n                }\r\n                \r\n                int sheetAdd = 0;\r\n                int sheetDel = 0;\r\n                \r\n                sheet.Cell(sheetNowRow, 1).Value = name;\r\n                sheet.Cell(sheetNowRow, 1).Style.Border.OutsideBorder = XLBorderStyleValues.Medium;\r\n                sheet.Cell(sheetNowRow, 1).Style.Fill.BackgroundColor = XLColor.YellowProcess;\r\n                \r\n                List<string> origStrList = new  List<string>();\r\n                List<string> revStrList = new  List<string>();\r\n            \r\n                List<IXLRow> origRows = null;\r\n                List<IXLRow> revRows = null;\r\n                if(origSheetsRows.ContainsKey(name))\r\n                {\r\n                    origRows = origSheetsRows[name].Item1;\r\n                }\r\n                if(revSheetsRows.ContainsKey(name))\r\n                {\r\n                    revRows = revSheetsRows[name].Item1;\r\n                }\r\n                \r\n                int origLastUsedColNum = origSheetsRows[name].Item2.Count;\r\n                if(origRows != null)\r\n                {\r\n                    foreach(IXLRow row in origRows)\r\n                    {\r\n                        IXLCells cells = row.CellsUsed();\r\n                        string value = \"\";\r\n                        foreach(IXLCell cell in cells)\r\n                        {\r\n                            value += cell.CachedValue;\r\n                        }\r\n                        origStrList.Add(value);\r\n                    }\r\n                }\r\n                int revLastUsedColNum = revSheetsRows[name].Item2.Count;\r\n                if(revRows != null)\r\n                {\r\n                    foreach(IXLRow row in revRows)\r\n                    {\r\n                        IXLCells cells = row.CellsUsed();\r\n                        string value = \"\";\r\n                        foreach(IXLCell cell in cells)\r\n                        {\r\n                            value += cell.CachedValue;\r\n                        }\r\n                        \r\n                        revStrList.Add(value);\r\n                    }\r\n                }\r\n                \r\n                IXLWorksheet diffSheet = workbook.AddWorksheet(name);\r\n                \r\n                List<DiffRes> diffResList = DiffTool.Diff(origStrList, revStrList);\r\n                int nowOrigRow = 1;\r\n                int nowRevRow = 1;\r\n                int nowRow = 1;\r\n                \r\n                int origStartColNum = 3;\r\n                int revStartColNum = origLastUsedColNum + origStartColNum + 2;\r\n                int midColNum = origLastUsedColNum + origStartColNum;\r\n                \r\n                int lastDelStartRow = -1;\r\n                int lastAddRow = -1;\r\n                \r\n                int endColNum = revStartColNum + revLastUsedColNum - 1;\r\n                \r\n                int origRowNumColNum = 2;\r\n                int revRowNumColNum = midColNum + 1;\r\n                \r\n                diffSheet.Column(1).Width = 2;\r\n                diffSheet.Column(1).Style.Border.RightBorder = XLBorderStyleValues.Medium;\r\n                diffSheet.Column(1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\r\n                diffSheet.Column(midColNum).Width = 1;\r\n                diffSheet.Column(midColNum).Style.Border.LeftBorder = XLBorderStyleValues.Medium;\r\n                diffSheet.Column(midColNum).Style.Border.RightBorder = XLBorderStyleValues.Medium;\r\n                \r\n                bool isMod = false;\r\n                foreach(DiffRes diffRes in diffResList)\r\n                {\r\n                    Logger.Info(diffRes.Type.ToString() + \": \" + diffRes.Index);\r\n                    if(diffRes.Type == DiffType.Delete)\r\n                    {\r\n                        ++sheetDel;\r\n                    \r\n                        lastAddRow = -1;\r\n                        isMod = true;\r\n                    \r\n                        diffSheet.Cell(nowRow, 1).SetValue(\"-\");\r\n                        diffSheet.Cell(nowRow, 1).Style.Fill.BackgroundColor = XLColor.Pink;\r\n                        \r\n                        nowOrigRow = diffRes.Index;\r\n                        \r\n                        if(origRows.Count <= nowOrigRow)\r\n                        {\r\n                            continue;\r\n                        }\r\n                        IXLRow row = origRows[nowOrigRow];\r\n                        int origStartColNumTemp = origStartColNum;\r\n                        IXLCell lastCellUsed = row.LastCellUsed();\r\n                        if(lastCellUsed != null)\r\n                        {\r\n                            int lastCellUsedColNum = lastCellUsed.Address.ColumnNumber;\r\n                            for(int i = 1; i <= lastCellUsedColNum; ++i)\r\n                            {\r\n                                IXLCell cell = row.Cell(i);\r\n                                cell.CopyTo(diffSheet.Cell(nowRow, origStartColNumTemp));\r\n                                ++origStartColNumTemp;\r\n                            }\r\n                        }\r\n                        ++nowOrigRow;\r\n                        \r\n                        if(lastDelStartRow == -1)\r\n                        {\r\n                            lastDelStartRow = nowRow;\r\n                        }\r\n                    }\r\n                    else if(diffRes.Type == DiffType.Add)\r\n                    {\r\n                        ++sheetAdd;\r\n                        \r\n                        int nowRowTemp = -1; \r\n                        if(lastDelStartRow != -1)\r\n                        {\r\n                            nowRowTemp = lastDelStartRow;\r\n                            --nowRow;\r\n                        }\r\n                        else if(lastAddRow != -1)\r\n                        {\r\n                            nowRowTemp = lastAddRow + 1;\r\n                        }\r\n                        else\r\n                        {\r\n                            nowRowTemp = nowRow;\r\n                        }\r\n                        nowRow = nowRowTemp > nowRow ? nowRowTemp : nowRow;\r\n                        lastDelStartRow = -1;\r\n                        lastAddRow = nowRowTemp;\r\n                        \r\n                        if(isMod)\r\n                        {\r\n                            diffSheet.Cell(nowRowTemp, 1).SetValue(\"~\");\r\n                            diffSheet.Cell(nowRowTemp, 1).Style.Fill.BackgroundColor = XLColor.YellowProcess;\r\n                        }\r\n                        else\r\n                        {\r\n                            diffSheet.Cell(nowRowTemp, 1).SetValue(\"+\");\r\n                            diffSheet.Cell(nowRowTemp, 1).Style.Fill.BackgroundColor = XLColor.BlueGreen;\r\n                        }\r\n                        nowRevRow = diffRes.Index;\r\n                        \r\n                        if(revRows.Count <= nowRevRow)\r\n                        {\r\n                            continue;\r\n                        }\r\n                        IXLRow row = revRows[nowRevRow];\r\n                        int revStartColNumTemp = revStartColNum;\r\n                        IXLCell lastCellUsed = row.LastCellUsed();\r\n                        if(lastCellUsed != null)\r\n                        {\r\n                            int lastCellUsedColNum = lastCellUsed.Address.ColumnNumber;\r\n                            for(int i = 1; i <= lastCellUsedColNum; ++i)\r\n                            {\r\n                                IXLCell cell = row.Cell(i);\r\n                                cell.CopyTo(diffSheet.Cell(nowRowTemp, revStartColNumTemp));\r\n                                ++revStartColNumTemp;\r\n                            }\r\n                        }\r\n                        ++nowRevRow;\r\n                    }\r\n                    else if(diffRes.Type == DiffType.None)\r\n                    {\r\n                        lastAddRow = -1;\r\n                        lastDelStartRow = -1;\r\n                        isMod = false;\r\n                        diffSheet.Cell(nowRow, 1).SetValue(\"\");\r\n                        nowOrigRow = diffRes.Index;\r\n                        \r\n                        if(origRows.Count <= nowOrigRow)\r\n                        {\r\n                            continue;\r\n                        }\r\n                        IXLRow row = origRows[nowOrigRow];\r\n                        int origStartColNumTemp = origStartColNum;\r\n                        int revStartColNumTemp = revStartColNum;\r\n                        diffSheet.Cell(nowRow, 1).SetValue(\"=\");\r\n                        IXLCell lastCellUsed = row.LastCellUsed();\r\n                        if(lastCellUsed != null)\r\n                        {\r\n                            int lastCellUsedColNum = lastCellUsed.Address.ColumnNumber;\r\n                            for(int i = 1; i <= lastCellUsedColNum; ++i)\r\n                            {\r\n                                IXLCell cell = row.Cell(i);\r\n                                cell.CopyTo(diffSheet.Cell(nowRow, origStartColNumTemp));\r\n                                cell.CopyTo(diffSheet.Cell(nowRow, revStartColNumTemp));\r\n                                ++origStartColNumTemp;\r\n                                ++revStartColNumTemp;\r\n                            }\r\n                        }\r\n                        ++nowOrigRow;\r\n                        ++nowRevRow;\r\n                    }\r\n                    \r\n                    ++nowRow;\r\n                }\r\n                \r\n                // 补救措施\r\n                List<IXLRange> origMergedRangeList = origSheetsRows[name].Item3;\r\n                List<IXLRange> revMergedRangeList = revSheetsRows[name].Item3;\r\n                Dictionary<int, int> origRowNumDic = new Dictionary<int, int>();\r\n                Dictionary<int, int> revRowNumDic = new Dictionary<int, int>();\r\n                int nowOrigRowForMerge = 1;\r\n                int nowRevRowForMerge = 1;\r\n                IXLRow lastUsedRow = diffSheet.LastRowUsed();\r\n                int lastNum = lastUsedRow == null ? 0 : diffSheet.LastRowUsed().RowNumber();\r\n                for(int i = 1; i <= lastNum; ++i)\r\n                {\r\n                    if(diffSheet.Cell(i, 1).CachedValue.Equals(\"\"))\r\n                    {\r\n                        diffSheet.Row(i).Delete();\r\n                        --i;\r\n                        --lastNum;\r\n                    }\r\n                    else if(diffSheet.Cell(i, 1).CachedValue.Equals(\"~\"))\r\n                    {\r\n                        diffSheet.Range(i, 1, i, endColNum).Style.Border.OutsideBorder = XLBorderStyleValues.MediumDashDot;\r\n                        diffSheet.Range(i, 1, i, endColNum).Style.Border.OutsideBorderColor = XLColor.YellowProcess;\r\n                        \r\n                        diffSheet.Cell(i, origRowNumColNum).Value = nowOrigRowForMerge;\r\n                        origRowNumDic.Add(nowOrigRowForMerge, i);\r\n                        ++nowOrigRowForMerge;\r\n                        diffSheet.Cell(i, revRowNumColNum).Value = nowRevRowForMerge;\r\n                        revRowNumDic.Add(nowRevRowForMerge, i);\r\n                        ++nowRevRowForMerge;\r\n                    }\r\n                    else if(diffSheet.Cell(i, 1).CachedValue.Equals(\"+\"))\r\n                    {\r\n                        diffSheet.Range(i, 1, i, endColNum).Style.Border.OutsideBorder = XLBorderStyleValues.MediumDashDot;\r\n                        diffSheet.Range(i, 1, i, endColNum).Style.Border.OutsideBorderColor = XLColor.BlueGreen;\r\n                        diffSheet.Cell(i, revRowNumColNum).Value = nowRevRowForMerge;\r\n                        revRowNumDic.Add(nowRevRowForMerge, i);\r\n                        ++nowRevRowForMerge;\r\n                    }\r\n                    else if(diffSheet.Cell(i, 1).CachedValue.Equals(\"-\"))\r\n                    {\r\n                        diffSheet.Range(i, 1, i, endColNum).Style.Border.OutsideBorder = XLBorderStyleValues.MediumDashDot;\r\n                        diffSheet.Range(i, 1, i, endColNum).Style.Border.OutsideBorderColor = XLColor.Pink;\r\n                        diffSheet.Cell(i, origRowNumColNum).Value = nowOrigRowForMerge;\r\n                        origRowNumDic.Add(nowOrigRowForMerge, i);\r\n                        ++nowOrigRowForMerge;\r\n                    }\r\n                    else if(diffSheet.Cell(i, 1).CachedValue.Equals(\"=\"))\r\n                    {\r\n                        diffSheet.Cell(i, origRowNumColNum).Value = nowOrigRowForMerge;\r\n                        origRowNumDic.Add(nowOrigRowForMerge, i);\r\n                        ++nowOrigRowForMerge;\r\n                        diffSheet.Cell(i, revRowNumColNum).Value = nowRevRowForMerge;\r\n                        revRowNumDic.Add(nowRevRowForMerge, i);\r\n                        ++nowRevRowForMerge;\r\n                    }\r\n                }\r\n                diffSheet.Column(origRowNumColNum).AdjustToContents();\r\n                diffSheet.Column(origRowNumColNum).Style.Fill.SetBackgroundColor(XLColor.AliceBlue);\r\n                diffSheet.Column(origRowNumColNum).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\r\n                diffSheet.Column(revRowNumColNum).AdjustToContents();\r\n                diffSheet.Column(revRowNumColNum).Style.Fill.SetBackgroundColor(XLColor.AliceBlue);\r\n                diffSheet.Column(revRowNumColNum).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\r\n                foreach(IXLRange range in origMergedRangeList)\r\n                {\r\n                    IXLAddress firstAddress = range.RangeAddress.FirstAddress;\r\n                    IXLAddress lastAddress = range.RangeAddress.LastAddress;\r\n                    if(origRowNumDic.ContainsKey(firstAddress.RowNumber) && origRowNumDic.ContainsKey(lastAddress.RowNumber))\r\n                    {\r\n                        diffSheet.Range(origRowNumDic[firstAddress.RowNumber], firstAddress.ColumnNumber + origStartColNum - 1, origRowNumDic[lastAddress.RowNumber], lastAddress.ColumnNumber + origStartColNum - 1).Merge();\r\n                    }\r\n                }\r\n                foreach(IXLRange range in revMergedRangeList)\r\n                {\r\n                    IXLAddress firstAddress = range.RangeAddress.FirstAddress;\r\n                    IXLAddress lastAddress = range.RangeAddress.LastAddress;\r\n                    if(revRowNumDic.ContainsKey(firstAddress.RowNumber) && revRowNumDic.ContainsKey(lastAddress.RowNumber))\r\n                    {\r\n                        diffSheet.Range(revRowNumDic[firstAddress.RowNumber], firstAddress.ColumnNumber + revStartColNum - 1, revRowNumDic[lastAddress.RowNumber], lastAddress.ColumnNumber + revStartColNum - 1).Merge();\r\n                    }\r\n                }\r\n                \r\n                List<double> origWidthList =  origSheetsRows[name].Item2;\r\n                List<double> revWidthList =  revSheetsRows[name].Item2;\r\n                int index = 0;\r\n                for(int i = origStartColNum; i < origStartColNum + origWidthList.Count; ++i)\r\n                {\r\n                    diffSheet.Column(i).Width = origWidthList[index];\r\n                    ++index;\r\n                }\r\n                index = 0;\r\n                for(int i = revStartColNum; i < revStartColNum + revWidthList.Count; ++i)\r\n                {\r\n                    diffSheet.Column(i).Width = revWidthList[index];\r\n                    ++index;\r\n                }\r\n                \r\n                sheet.Cell(sheetNowRow, 2).Value = sheetAdd;\r\n                sheet.Cell(sheetNowRow, 2).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;\r\n                sheet.Cell(sheetNowRow, 2).Style.Border.OutsideBorder = XLBorderStyleValues.Medium;\r\n                sheet.Cell(sheetNowRow, 3).Value = sheetDel;\r\n                sheet.Cell(sheetNowRow, 3).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;\r\n                sheet.Cell(sheetNowRow, 3).Style.Border.OutsideBorder = XLBorderStyleValues.Medium;\r\n                ++sheetNowRow;\r\n            }\r\n            \r\n            IXLColumns colUsedRes = sheet.ColumnsUsed();\r\n            foreach(IXLColumn col in colUsedRes)\r\n            {\r\n                col.AdjustToContents(1, 3);\r\n            }\r\n            sheet.Column(1).InsertColumnsBefore(1);\r\n            sheet.Row(1).InsertRowsAbove(1);\r\n\r\n        }\r\n    }\r\n}\r\n"}