{"name":"diff_folder","code":"using ClosedXML.Excel;\r\nusing GlobalObjects;\r\nusing System;\r\nusing System.IO;\r\nusing System.Collections.Concurrent;\r\nusing System.Collections.Generic;\r\nusing System.Drawing;\r\nusing Diff;\r\n\r\nnamespace AnalyzeCode\r\n{\r\n    class Analyze\r\n    {\r\n        /// <summary>\r\n        /// 在所有分析前调用\r\n        /// </summary>\r\n        /// <param name=\"param\">传入的参数</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"allFilePathList\">将会分析的所有文件路径列表</param>\r\n        public void RunBeforeAnalyzeSheet(Param param, ref Object globalObject, List<string> allFilePathList)\r\n        {\r\n            if(allFilePathList.Count == 1)\r\n            {\r\n                throw new Exception(\"只输入了一个文件, 无法比较\");\r\n            }\r\n        \r\n            Logger.Info(\"RunBeforeAnalyze\");\r\n            Dictionary<string, Dictionary<string, Tuple<List<IXLRow>, List<double>>>> rowsDic = new Dictionary<string, Dictionary<string, Tuple<List<IXLRow>, List<double>>>>();\r\n            \r\n            Logger.Info(\"Diff \" + allFilePathList.Count.ToString() + \"files\");\r\n            foreach(string path in allFilePathList)\r\n            {\r\n                Dictionary<string, Tuple<List<IXLRow>, List<double>>> dic = new Dictionary<string, Tuple<List<IXLRow>, List<double>>>();\r\n                rowsDic.Add(path, dic);\r\n                Logger.Info(path);\r\n            }\r\n            \r\n            globalObject = rowsDic;\r\n        }\r\n\r\n        /// <summary>\r\n        /// 分析一个sheet\r\n        /// </summary>\r\n        /// <param name=\"param\">传入的参数</param>\r\n        /// <param name=\"sheet\">被分析的sheet</param>\r\n        /// <param name=\"result\">存储当前文件的信息 ResultType { (String) FILEPATH [文件路径], (String) FILENAME [文件名], (String) MESSAGE [当查找时出现问题时输出的消息], (Object) RESULTOBJECT [用户自定的分析结果] }</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"invokeCount\">此分析函数被调用的次数</param>\r\n        public void AnalyzeSheet(Param param, IXLWorksheet sheet, ConcurrentDictionary<ResultType, Object> result, ref Object globalObject, int invokeCount)\r\n        {\r\n            Logger.Info(\"AnalyzeSheet\" + invokeCount + \": \" + sheet.Name + \" in \" + Path.GetFileName((string)result[ResultType.FILEPATH]));\r\n            \r\n            IXLRow lastUsedRow = sheet.LastRowUsed(true);\r\n            int lastRowNum = lastUsedRow == null ? 0 : sheet.LastRowUsed(true).RowNumber();\r\n            List<IXLRow> rows = new List<IXLRow>();\r\n            int lastUsedColNum = 0;\r\n            for(int i = 1; i <= lastRowNum; ++i)\r\n            {\r\n                IXLRow row = sheet.Row(i);\r\n                rows.Add(row);\r\n                \r\n                IXLCell lastUsedCell = row.LastCellUsed(true);\r\n                \r\n                int rowLastCellUsedColumnNumber = lastUsedCell == null ? 0 : lastUsedCell.Address.ColumnNumber;\r\n                if(lastUsedCell != null && lastUsedCell.IsMerged())\r\n                {\r\n                    rowLastCellUsedColumnNumber += lastUsedCell.MergedRange().ColumnCount() - 1;\r\n                }\r\n                \r\n                lastUsedColNum = rowLastCellUsedColumnNumber > lastUsedColNum ? rowLastCellUsedColumnNumber : lastUsedColNum;\r\n            }\r\n            \r\n            List<double> widthList = new List<double>();\r\n            for(int j = 1; j <= lastUsedColNum; ++j)\r\n            {\r\n                widthList.Add(sheet.Column(j).Width);\r\n            }\r\n            \r\n            ((Dictionary<string, Dictionary<string, Tuple<List<IXLRow>, List<double>>>>)globalObject)[(string)result[ResultType.FILEPATH]].Add(sheet.Name, new Tuple<List<IXLRow>, List<double>>(rows, widthList));\r\n        }\r\n\r\n        /// <summary>\r\n        /// 在所有输出前调用\r\n        /// </summary>\r\n        /// <param name=\"param\">传入的参数</param>\r\n        /// <param name=\"workbook\">用于输出的excel文件</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"resultList\">所有文件的信息</param>\r\n        /// <param name=\"allFilePathList\">分析的所有文件路径列表</param>\r\n        public void RunBeforeSetResult(Param param, XLWorkbook workbook, ref Object globalObject, ICollection<ConcurrentDictionary<ResultType, Object>> resultList, List<string> allFilePathList)\r\n        {\r\n            \r\n        }\r\n\r\n        /// <summary>\r\n        /// 根据分析结果输出到excel中\r\n        /// </summary>\r\n        /// <param name=\"param\">传入的参数</param>\r\n        /// <param name=\"workbook\">用于输出的excel文件</param>\r\n        /// <param name=\"result\">存储当前文件的信息 ResultType { (String) FILEPATH [文件路径], (String) FILENAME [文件名], (String) MESSAGE [当查找时出现问题时输出的消息], (Object) RESULTOBJECT [用户自定的分析结果] }</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"invokeCount\">此输出函数被调用的次数</param>\r\n        /// <param name=\"totalCount\">总共需要调用的输出函数的次数</param>\r\n        public void SetResult(Param param, XLWorkbook workbook, ConcurrentDictionary<ResultType, Object> result, ref Object globalObject, int invokeCount, int totalCount)\r\n        {\r\n            \r\n        }\r\n\r\n        /// <summary>\r\n        /// 所有调用结束后调用\r\n        /// </summary>\r\n        /// <param name=\"param\">传入的参数</param>\r\n        /// <param name=\"workbook\">用于输出的excel文件</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"resultList\">所有文件的信息</param>\r\n        /// <param name=\"allFilePathList\">分析的所有文件路径列表</param>\r\n        public void RunEnd(Param param, XLWorkbook workbook, ref Object globalObject, ICollection<ConcurrentDictionary<ResultType, Object>> resultList, List<string> allFilePathList)\r\n        {\r\n            Logger.Info(\"RunEnd\");\r\n            \r\n            string zoom = param.GetOne(\"Zoom\");\r\n            string freeze = param.GetOne(\"Freeze\");\r\n            string display = param.GetOne(\"Display\");\r\n            List<string> option = param.Get(\"DiffOption\");\r\n            \r\n            Dictionary<string, Dictionary<string, Tuple<List<IXLRow>, List<double>>>> rowsDic = (Dictionary<string, Dictionary<string, Tuple<List<IXLRow>, List<double>>>>)globalObject;\r\n            \r\n            List<string> analyzedFileNameList = new List<string>();\r\n            \r\n            int diffFileCount = 0;\r\n            \r\n            IXLWorksheet totalSheet = workbook.AddWorksheet(\"Res\");\r\n            int totalSheetLine = 0;\r\n            \r\n            foreach(string origPath in rowsDic.Keys)\r\n            {\r\n                string fileName = Path.GetFileName(origPath);\r\n                string revFileName = \"\";\r\n                if(analyzedFileNameList.Contains(fileName))\r\n                {\r\n                    continue;\r\n                }\r\n                ++diffFileCount;\r\n                string revPath = \"\";\r\n                foreach(string path in allFilePathList)\r\n                {\r\n                    if(allFilePathList.Count > 2 && path != origPath && Path.GetFileName(path).Equals(fileName))\r\n                    {\r\n                        revPath = path;\r\n                    }\r\n                    else if(allFilePathList.Count == 2 && path != origPath)\r\n                    {\r\n                        revPath = path;\r\n                        string revFileNameTemp = Path.GetFileName(revPath);\r\n                        if(revFileNameTemp != fileName)\r\n                        {\r\n                            revFileName = revFileNameTemp;\r\n                        }\r\n                    }\r\n                }\r\n                if(String.IsNullOrEmpty(revPath))\r\n                {\r\n                    continue;\r\n                }\r\n                \r\n                ++totalSheetLine;\r\n                totalSheet.Cell(totalSheetLine, 1).Value = totalSheetLine;\r\n                totalSheet.Cell(totalSheetLine, 2).Value = fileName;\r\n                if(revFileName != \"\")\r\n                {\r\n                    totalSheet.Cell(totalSheetLine, 2).Value += \" | \" + revFileName;\r\n                }\r\n                totalSheet.Column(2).Style.Alignment.WrapText = true;\r\n                totalSheet.Column(2).AdjustToContents();\r\n                \r\n                Dictionary<string, Tuple<List<IXLRow>, List<double>>> origSheetsRows = rowsDic[origPath];\r\n                Dictionary<string, Tuple<List<IXLRow>, List<double>>> revSheetsRows = rowsDic[revPath];\r\n            \r\n                analyzedFileNameList.Add(fileName);\r\n                if(revFileName != \"\")\r\n                {\r\n                    analyzedFileNameList.Add(revFileName);\r\n                }\r\n                \r\n                int leaveSize = 31 - \"<> \".Length - diffFileCount.ToString().Length;\r\n                string tempFileName = fileName.Replace(\"\\\\\", \"\").Replace(\"/\", \"\").Replace(\"?\", \"\").Replace(\"*\", \"\").Replace(\"[\", \"\").Replace(\"]\", \"\");\r\n                if(tempFileName.Length > leaveSize)\r\n                {\r\n                    tempFileName = \"...\" + tempFileName.Substring(tempFileName.Length - (leaveSize - 3));\r\n                }\r\n                IXLWorksheet sheet = workbook.AddWorksheet(\"<\" + diffFileCount + \"> \" + tempFileName);\r\n                totalSheet.Cell(totalSheetLine, 2).Hyperlink = new XLHyperlink(sheet.FirstCell());\r\n                sheet.Cell(1, 1).Value = fileName;\r\n                if(revFileName != \"\")\r\n                {\r\n                    sheet.Cell(1, 1).Value += \" | \" + revFileName;\r\n                }\r\n                sheet.Cell(1, 2).Value = \"+\";\r\n                sheet.Cell(1, 2).Style.Border.OutsideBorder = XLBorderStyleValues.Medium;\r\n                sheet.Cell(1, 2).Style.Fill.BackgroundColor = XLColor.BlueGreen;\r\n                sheet.Cell(1, 2).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\r\n                sheet.Cell(1, 3).Value = \"-\";\r\n                sheet.Cell(1, 3).Style.Border.OutsideBorder = XLBorderStyleValues.Medium;\r\n                sheet.Cell(1, 3).Style.Fill.BackgroundColor = XLColor.BlueGreen;\r\n                sheet.Cell(1, 3).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\r\n                sheet.Cell(1, 4).Value = \"~\";\r\n                sheet.Cell(1, 4).Style.Border.OutsideBorder = XLBorderStyleValues.Medium;\r\n                sheet.Cell(1, 4).Style.Fill.BackgroundColor = XLColor.BlueGreen;\r\n                sheet.Cell(1, 4).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\r\n                sheet.Cell(1, 5).Value = \"=\";\r\n                sheet.Cell(1, 5).Style.Border.OutsideBorder = XLBorderStyleValues.Medium;\r\n                sheet.Cell(1, 5).Style.Fill.BackgroundColor = XLColor.BlueGreen;\r\n                sheet.Cell(1, 5).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\r\n                int sheetNowRow = 2;\r\n                \r\n                List<ConcurrentDictionary<ResultType, Object>> listTemp = new List<ConcurrentDictionary<ResultType, object>>();\r\n                foreach (ConcurrentDictionary<ResultType, Object> res in resultList)\r\n                {\r\n                    listTemp.Add(res);\r\n                }\r\n                \r\n                List<string> sheetNames = new List<string>();\r\n                foreach (string name in origSheetsRows.Keys)\r\n                {\r\n                    if(!sheetNames.Contains(name))\r\n                    {\r\n                        sheetNames.Add(name);\r\n                    }\r\n                }\r\n                foreach (string name in revSheetsRows.Keys)\r\n                {\r\n                    if(!sheetNames.Contains(name))\r\n                    {\r\n                        sheetNames.Add(name);\r\n                    }\r\n                }\r\n                \r\n                foreach(string name in sheetNames)\r\n                {\r\n                    Logger.Info(\"Diff: \" + name + \" in \" + fileName + \", total: \" + sheetNames.Count + \"sheets\");\r\n                    \r\n                    if(!origSheetsRows.ContainsKey(name) || !revSheetsRows.ContainsKey(name))\r\n                    {\r\n                        continue;\r\n                    }\r\n                    \r\n                    int sheetAdd = 0;\r\n                    int sheetDel = 0;\r\n                    int sheetMod = 0;\r\n                    int sheetSame = 0;\r\n                    \r\n                    sheet.Cell(sheetNowRow, 1).Value = name;\r\n                    sheet.Cell(sheetNowRow, 1).Style.Border.OutsideBorder = XLBorderStyleValues.Medium;\r\n                    sheet.Cell(sheetNowRow, 1).Style.Fill.BackgroundColor = XLColor.YellowProcess;\r\n                    \r\n                    List<string> origStrList = new  List<string>();\r\n                    List<string> revStrList = new  List<string>();\r\n                \r\n                    List<IXLRow> origRows = null;\r\n                    List<IXLRow> revRows = null;\r\n                    if(origSheetsRows.ContainsKey(name))\r\n                    {\r\n                        origRows = origSheetsRows[name].Item1;\r\n                    }\r\n                    if(revSheetsRows.ContainsKey(name))\r\n                    {\r\n                        revRows = revSheetsRows[name].Item1;\r\n                    }\r\n                    \r\n                    int origLastUsedColNum = origSheetsRows[name].Item2.Count;\r\n                    if(origRows != null)\r\n                    {\r\n                        foreach(IXLRow row in origRows)\r\n                        {\r\n                            IXLCells cells = row.CellsUsed(true);\r\n                            string value = \"\";\r\n                            foreach(IXLCell cell in cells)\r\n                            {\r\n                                IXLCell cellTemp = cell;\r\n                                if(cell.IsMerged())\r\n                                {\r\n                                    cellTemp = cell.MergedRange().FirstCell();\r\n                                }\r\n                                value += cellTemp.CachedValue;\r\n                                \r\n                                /*\r\n                                if(!option.Contains(\"IgnoreStyle\"))\r\n                                {\r\n                                    string backgroundColor = \"\";\r\n                                    if(cellTemp.Style.Fill.BackgroundColor.HasValue)\r\n                                    {\r\n                                    \r\n                                        if(cellTemp.Style.Fill.BackgroundColor.ColorType == XLColorType.Color)\r\n                                        {\r\n                                            backgroundColor += \"Color: \" + cellTemp.Style.Fill.BackgroundColor.Color.ToArgb();\r\n                                        }\r\n                                        else if(cellTemp.Style.Fill.BackgroundColor.ColorType == XLColorType.Theme)\r\n                                        {\r\n                                            backgroundColor += \"Theme: \" + cellTemp.Style.Fill.BackgroundColor.ThemeColor;\r\n                                        }\r\n                                        else if(cellTemp.Style.Fill.BackgroundColor.ColorType == XLColorType.Indexed)\r\n                                        {\r\n                                            backgroundColor += \"Indexed: \" + cellTemp.Style.Fill.BackgroundColor.Indexed;\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    string patternColor = \"\";\r\n                                    if(cellTemp.Style.Fill.PatternColor.HasValue)\r\n                                    {\r\n                                        if(cellTemp.Style.Fill.PatternColor.ColorType == XLColorType.Color)\r\n                                        {\r\n                                            patternColor += \"Color: \" + cellTemp.Style.Fill.PatternColor.Color.ToArgb();\r\n                                        }\r\n                                        else if(cellTemp.Style.Fill.PatternColor.ColorType == XLColorType.Theme)\r\n                                        {\r\n                                            patternColor += \"Theme: \" + cellTemp.Style.Fill.PatternColor.ThemeColor;\r\n                                        }\r\n                                        else if(cellTemp.Style.Fill.PatternColor.ColorType == XLColorType.Indexed)\r\n                                        {\r\n                                            patternColor += \"Indexed: \" + cellTemp.Style.Fill.PatternColor.Indexed;\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    string patternType = \"PatternType: \" + cellTemp.Style.Fill.PatternType.ToString();\r\n                                    \r\n                                    Logger.Warn(backgroundColor + patternColor + patternType);\r\n                                    value += backgroundColor + patternColor + patternType;\r\n                                }\r\n                                */\r\n                            }\r\n                            origStrList.Add(value);\r\n                        }\r\n                    }\r\n                    int revLastUsedColNum = revSheetsRows[name].Item2.Count;\r\n                    if(revRows != null)\r\n                    {\r\n                        foreach(IXLRow row in revRows)\r\n                        {\r\n                            IXLCells cells = row.CellsUsed(true);\r\n                            string value = \"\";\r\n                            foreach(IXLCell cell in cells)\r\n                            {\r\n                                IXLCell cellTemp = cell;\r\n                                if(cell.IsMerged())\r\n                                {\r\n                                    cellTemp = cell.MergedRange().FirstCell();\r\n                                }\r\n                                value += cellTemp.CachedValue;\r\n                            }\r\n                            \r\n                            if(option.Contains(\"IgnoreSpace\"))\r\n                            {\r\n                                value = value.Replace(\" \", \"\");\r\n                            }\r\n                            if(option.Contains(\"IgnoreCase\"))\r\n                            {\r\n                                value = value.ToLowerInvariant();\r\n                            }\r\n                            \r\n                            revStrList.Add(value);\r\n                        }\r\n                    }\r\n                    \r\n                    string diffSheetName = name;\r\n                    int leaveSheetNameSize = 31 - \". \".Length - diffFileCount.ToString().Length;\r\n                    if(diffSheetName.Length > leaveSheetNameSize)\r\n                    {\r\n                        diffSheetName = \"...\" + diffSheetName.Substring(leaveSheetNameSize - 3);\r\n                    }\r\n                    IXLWorksheet diffSheet = workbook.AddWorksheet(diffFileCount + \". \" + diffSheetName);\r\n                    sheet.Cell(sheetNowRow, 1).Hyperlink = new XLHyperlink(diffSheet.FirstCell());\r\n                    List<SplitedDiffRes> diffResList = DiffTool.GetSplitedResult(DiffTool.Diff(origStrList, revStrList));\r\n                    int origStartColNum = 3;\r\n                    int revStartColNum = origLastUsedColNum + origStartColNum + 2;\r\n                    int midColNum = origLastUsedColNum + origStartColNum;\r\n                    \r\n                    int endColNum = revStartColNum + revLastUsedColNum - 1;\r\n                    \r\n                    int origRowNumColNum = 2;\r\n                    int revRowNumColNum = midColNum + 1;\r\n                    \r\n                    diffSheet.Column(1).Width = 2;\r\n                    diffSheet.Column(1).Style.Border.RightBorder = XLBorderStyleValues.Medium;\r\n                    diffSheet.Column(1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\r\n                    diffSheet.Column(1).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;\r\n                    diffSheet.Column(midColNum).Width = 1;\r\n                    diffSheet.Column(midColNum).Style.Border.LeftBorder = XLBorderStyleValues.Medium;\r\n                    diffSheet.Column(midColNum).Style.Border.RightBorder = XLBorderStyleValues.Medium;\r\n                    \r\n                    List<IXLRange> origMergedRangeList = new List<IXLRange>();\r\n                    List<IXLRange> revMergedRangeList = new List<IXLRange>();\r\n                    \r\n                    int nowRow = 1;\r\n                    int maxColNum = 1;\r\n                    foreach(SplitedDiffRes diffRes in diffResList)\r\n                    {\r\n                        if(diffRes.Type == SplitedDiffType.None)\r\n                        {\r\n                            ++sheetSame;\r\n                            \r\n                            diffSheet.Cell(nowRow, 1).SetValue(\"=\");\r\n                            \r\n                            Logger.Info(\"None: Orig Line\" + diffRes.OrigIndex + \" and Rev Line\" + diffRes.RevIndex);\r\n                        }\r\n                        else if(diffRes.Type == SplitedDiffType.Delete)\r\n                        {\r\n                            ++sheetDel;\r\n                        \r\n                            diffSheet.Cell(nowRow, 1).SetValue(\"-\");\r\n                            diffSheet.Cell(nowRow, 1).Style.Fill.BackgroundColor = XLColor.Pink;\r\n                            \r\n                            Logger.Info(\"Delete: Line\" + diffRes.OrigIndex);\r\n                        }\r\n                        else if(diffRes.Type == SplitedDiffType.Add)\r\n                        {\r\n                            ++sheetAdd;\r\n                            \r\n                            diffSheet.Cell(nowRow, 1).SetValue(\"+\");\r\n                            diffSheet.Cell(nowRow, 1).Style.Fill.BackgroundColor = XLColor.BlueGreen;\r\n                            \r\n                            Logger.Info(\"Add: Line\" + diffRes.RevIndex);\r\n                        }\r\n                        else if(diffRes.Type == SplitedDiffType.Modify)\r\n                        {\r\n                            ++sheetMod;\r\n                            \r\n                            diffSheet.Cell(nowRow, 1).SetValue(\"~\");\r\n                            diffSheet.Cell(nowRow, 1).Style.Fill.BackgroundColor = XLColor.YellowProcess;\r\n                            \r\n                            Logger.Info(\"Modify: Orig Line\" + diffRes.OrigIndex + \" and Rev Line\" + diffRes.RevIndex);\r\n                        }\r\n                        \r\n                        if(diffRes.OrigIndex != -1)\r\n                        {\r\n                            IXLRow row = origRows[diffRes.OrigIndex];\r\n                            int origStartColNumTemp = origStartColNum;\r\n                            IXLCell lastCellUsed = row.LastCellUsed(true);\r\n                            if(lastCellUsed != null)\r\n                            {\r\n                                int lastCellUsedColNum = lastCellUsed.Address.ColumnNumber;\r\n                                for(int i = 1; i <= lastCellUsedColNum; ++i)\r\n                                {\r\n                                    IXLCell cell = row.Cell(i);\r\n                                    if(cell.HasFormula)\r\n                                    {\r\n                                        diffSheet.Cell(nowRow, origStartColNumTemp).SetValue(cell.CachedValue);\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        cell.CopyTo(diffSheet.Cell(nowRow, origStartColNumTemp));\r\n                                        \r\n                                        if(cell.IsMerged() && !origMergedRangeList.Contains(cell.MergedRange()))\r\n                                        {\r\n                                            diffSheet.Range(nowRow, origStartColNumTemp, nowRow + (cell.MergedRange().LastRow().RowNumber() - cell.MergedRange().FirstRow().RowNumber()), origStartColNumTemp + (cell.MergedRange().LastColumn().ColumnNumber() - cell.MergedRange().FirstColumn().ColumnNumber())).Merge();\r\n                                            origMergedRangeList.Add(cell.MergedRange());\r\n                                        }\r\n                                    }\r\n                                    if(diffSheet.Row(nowRow).Height < row.Height)\r\n                                    {\r\n                                        diffSheet.Row(nowRow).Height = row.Height;\r\n                                    }\r\n                                    ++origStartColNumTemp;\r\n                                }\r\n                            }\r\n                        }\r\n                        \r\n                        if(diffRes.RevIndex != -1)\r\n                        {\r\n                            IXLRow row = revRows[diffRes.RevIndex];\r\n                            int revStartColNumTemp = revStartColNum;\r\n                            IXLCell lastCellUsed = row.LastCellUsed(true);\r\n                            if(lastCellUsed != null)\r\n                            {\r\n                                int lastCellUsedColNum = lastCellUsed.Address.ColumnNumber;\r\n                                for(int i = 1; i <= lastCellUsedColNum; ++i)\r\n                                {\r\n                                    IXLCell cell = row.Cell(i);\r\n                                    if(cell.HasFormula)\r\n                                    {\r\n                                        diffSheet.Cell(nowRow, revStartColNumTemp).SetValue(cell.CachedValue);\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        cell.CopyTo(diffSheet.Cell(nowRow, revStartColNumTemp));\r\n                                        \r\n                                        if(cell.IsMerged() && !revMergedRangeList.Contains(cell.MergedRange()))\r\n                                        {\r\n                                            diffSheet.Range(nowRow, revStartColNumTemp, nowRow + (cell.MergedRange().LastRow().RowNumber() - cell.MergedRange().FirstRow().RowNumber()), revStartColNumTemp + (cell.MergedRange().LastColumn().ColumnNumber() - cell.MergedRange().FirstColumn().ColumnNumber())).Merge();\r\n                                            revMergedRangeList.Add(cell.MergedRange());\r\n                                        }\r\n                                    }\r\n                                    if(diffSheet.Row(nowRow).Height < row.Height)\r\n                                    {\r\n                                        diffSheet.Row(nowRow).Height = row.Height;\r\n                                    }\r\n                                    ++revStartColNumTemp;\r\n                                }\r\n                                \r\n                                int lastRevColNum = diffSheet.Row(nowRow).LastCellUsed(true).Address.ColumnNumber;\r\n                                if(lastRevColNum > maxColNum)\r\n                                {\r\n                                    maxColNum = lastRevColNum;\r\n                                }\r\n                            }\r\n                        }\r\n                        \r\n                        ++nowRow;\r\n                    }\r\n                    \r\n                    IXLRows rowsUsed = diffSheet.RowsUsed(true);\r\n                    int nowOrigRow = 1;\r\n                    int nowRevRow = 1;\r\n                    foreach(IXLRow row in rowsUsed)\r\n                    {\r\n                        IXLRange range = diffSheet.Range(row.RowNumber(), 1, row.RowNumber(), maxColNum);\r\n                        if(row.FirstCell().Value.ToString() == \"-\")\r\n                        {\r\n                            row.Cell(origRowNumColNum).Value = nowOrigRow++;\r\n                            \r\n                            range.Style.Border.OutsideBorder = XLBorderStyleValues.MediumDashDot;\r\n                            range.Style.Border.OutsideBorderColor = XLColor.Pink;\r\n                            \r\n                            diffSheet.Range(row.RowNumber(), revStartColNum, row.RowNumber(), maxColNum).Style.Fill.BackgroundColor = XLColor.LightGray;\r\n                        }\r\n                        else if(row.FirstCell().Value.ToString() == \"+\")\r\n                        {\r\n                            row.Cell(revRowNumColNum).Value = nowRevRow++;\r\n                            range.Style.Border.OutsideBorder = XLBorderStyleValues.MediumDashDot;\r\n                            range.Style.Border.OutsideBorderColor = XLColor.BlueGreen;\r\n                            \r\n                            diffSheet.Range(row.RowNumber(), 3, row.RowNumber(), origLastUsedColNum + origStartColNum - 1).Style.Fill.BackgroundColor = XLColor.LightGray;\r\n                        }\r\n                        else if(row.FirstCell().Value.ToString() == \"~\")\r\n                        {\r\n                            row.Cell(origRowNumColNum).Value = nowOrigRow++;\r\n                            row.Cell(revRowNumColNum).Value = nowRevRow++;\r\n                            range.Style.Border.OutsideBorder = XLBorderStyleValues.MediumDashDot;\r\n                            range.Style.Border.OutsideBorderColor = XLColor.YellowProcess;\r\n                        }\r\n                        else if(row.FirstCell().Value.ToString() == \"=\")\r\n                        {\r\n                            row.Cell(origRowNumColNum).Value = nowOrigRow++;\r\n                            row.Cell(revRowNumColNum).Value = nowRevRow++;\r\n                        }\r\n                    }\r\n                    \r\n                    // 后续着色高亮等操作\r\n                    diffSheet.Column(origRowNumColNum).Style.Alignment.WrapText = true;\r\n                    diffSheet.Column(origRowNumColNum).AdjustToContents();\r\n                    diffSheet.Column(origRowNumColNum).Style.Fill.SetBackgroundColor(XLColor.AliceBlue);\r\n                    diffSheet.Column(origRowNumColNum).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\r\n                    diffSheet.Column(origRowNumColNum).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;\r\n                    diffSheet.Column(revRowNumColNum).Style.Alignment.WrapText = true;\r\n                    diffSheet.Column(revRowNumColNum).AdjustToContents();\r\n                    diffSheet.Column(revRowNumColNum).Style.Fill.SetBackgroundColor(XLColor.AliceBlue);\r\n                    diffSheet.Column(revRowNumColNum).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\r\n                    diffSheet.Column(revRowNumColNum).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;\r\n                    \r\n                    List<double> origWidthList =  origSheetsRows[name].Item2;\r\n                    List<double> revWidthList =  revSheetsRows[name].Item2;\r\n                    int index = 0;\r\n                    for(int i = origStartColNum; i < origStartColNum + origWidthList.Count; ++i)\r\n                    {\r\n                        diffSheet.Column(i).Width = origWidthList[index];\r\n                        ++index;\r\n                    }\r\n                    index = 0;\r\n                    for(int i = revStartColNum; i < revStartColNum + revWidthList.Count; ++i)\r\n                    {\r\n                        diffSheet.Column(i).Width = revWidthList[index];\r\n                        ++index;\r\n                    }\r\n                    \r\n                    if(!String.IsNullOrEmpty(zoom))\r\n                    {\r\n                        diffSheet.SheetView.ZoomScale = int.Parse(zoom);\r\n                    }\r\n                    if(!String.IsNullOrEmpty(freeze) && freeze.Equals(\"True\"))\r\n                    {\r\n                        diffSheet.SheetView.FreezeColumns(midColNum);\r\n                    }\r\n                    \r\n                    sheet.Cell(sheetNowRow, 2).Value = sheetAdd;\r\n                    sheet.Cell(sheetNowRow, 2).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;\r\n                    sheet.Cell(sheetNowRow, 2).Style.Border.OutsideBorder = XLBorderStyleValues.Medium;\r\n                    sheet.Cell(sheetNowRow, 3).Value = sheetDel;\r\n                    sheet.Cell(sheetNowRow, 3).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;\r\n                    sheet.Cell(sheetNowRow, 3).Style.Border.OutsideBorder = XLBorderStyleValues.Medium;\r\n                    sheet.Cell(sheetNowRow, 4).Value = sheetMod;\r\n                    sheet.Cell(sheetNowRow, 4).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;\r\n                    sheet.Cell(sheetNowRow, 4).Style.Border.OutsideBorder = XLBorderStyleValues.Medium;\r\n                    sheet.Cell(sheetNowRow, 5).Value = sheetSame;\r\n                    sheet.Cell(sheetNowRow, 5).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;\r\n                    sheet.Cell(sheetNowRow, 5).Style.Border.OutsideBorder = XLBorderStyleValues.Medium;\r\n                    ++sheetNowRow;\r\n                }\r\n                \r\n                IXLColumns colUsedRes = sheet.ColumnsUsed(true);\r\n                foreach(IXLColumn col in colUsedRes)\r\n                {\r\n                    col.Style.Alignment.WrapText = true;\r\n                    col.AdjustToContents();\r\n                }\r\n                \r\n                sheet.Column(1).InsertColumnsBefore(1);\r\n                sheet.Row(1).InsertRowsAbove(1);\r\n                sheet.Row(1).InsertRowsAbove(1);\r\n                sheet.Cell(2, 6).Value = \"←\";\r\n                sheet.Cell(2, 6).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Right;\r\n                sheet.Cell(2, 6).Hyperlink = new XLHyperlink(totalSheet.FirstCell());\r\n            }\r\n        }\r\n    }\r\n}\r\n","paramDic":{"Zoom":{"describe":"输出sheet的缩放比","possibleValues":null,"type":2},"Freeze":{"describe":"是否冻结左侧被比较内容","possibleValues":[{"value":"True","describe":"是"},{"value":"False","describe":"否"}],"type":1},"Display":{"describe":"差分结果显示模式 (Unified模式未实现)","possibleValues":[{"value":"Split","describe":null},{"value":"Unified","describe":null}],"type":1},"DiffOption":{"describe":"差分选项 (样式比较未实现)","possibleValues":[{"value":"IgnoreSpace","describe":"忽略空格"},{"value":"IgnoreCase","describe":"不区分大小写"},{"value":"IgnoreStyle","describe":"不比较样式"}],"type":2}}}