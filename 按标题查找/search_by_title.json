{"name":"search_by_title","code":"using ClosedXML.Excel;\r\nusing GlobalObjects;\r\nusing System;\r\nusing System.Collections.Concurrent;\r\nusing System.Collections.Generic;\r\n\r\nnamespace AnalyzeCode\r\n{\r\n    class Analyze\r\n    {\r\n        /// <summary>\r\n        /// 在所有分析前调用\r\n        /// </summary>\r\n        /// <param name=\"paramDic\">传入的参数</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"allFilePathList\">将会分析的所有文件路径列表</param>\r\n        public void RunBeforeAnalyzeSheet(Dictionary<string, string> paramDic, ref Object globalObject, List<string> allFilePathList)\r\n        {\r\n            Logger.Info(\"Search By Title RunBeforeAnalyzeSheet Start\");\r\n            Logger.Info(\"Search By Title RunBeforeAnalyzeSheet End\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 分析一个sheet\r\n        /// </summary>\r\n        /// <param name=\"paramDic\">传入的参数</param>\r\n        /// <param name=\"sheet\">被分析的sheet</param>\r\n        /// <param name=\"result\">存储当前文件的信息 ResultType { (String) FILEPATH [文件路径], (String) FILENAME [文件名], (String) MESSAGE [当查找时出现问题时输出的消息], (Object) RESULTOBJECT [用户自定的分析结果] }</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"invokeCount\">此分析函数被调用的次数</param>\r\n        public void AnalyzeSheet(Dictionary<string, string> paramDic, IXLWorksheet sheet, ConcurrentDictionary<ResultType, Object> result, ref Object globalObject, int invokeCount)\r\n        {\r\n            Logger.Info(\"Analyze Start No.\" + invokeCount.ToString() + \", \" + result[ResultType.FILENAME]);\r\n\r\n            string titles = paramDic[\"sbt_k\"];\r\n            string titleLine = titles.Split('&')[0];\r\n            int titleLineNum = int.Parse(titleLine);\r\n            IXLCell startCell = sheet.Cell(titles.Split('&')[1] + titleLine);\r\n            IXLCell endCell = sheet.Cell(titles.Split('&')[2] + titleLine);\r\n            int titleStartIndex = startCell.Address.ColumnNumber;\r\n            int titleEndIndex = endCell.Address.ColumnNumber;\r\n\r\n            IXLRanges mergedRanges = sheet.MergedRanges;\r\n\r\n            Dictionary<string, int> titleDic = new Dictionary<string, int>();\r\n\r\n            List<IXLCell> titleValueCellList = new List<IXLCell>();\r\n\r\n            for (int i = titleStartIndex; i < titleEndIndex; ++i)\r\n            {\r\n                IXLCell nowCell = sheet.Cell(titleLineNum, i);\r\n\r\n                IXLCell titleValueCell = null;\r\n\r\n                IXLRange range = null;\r\n                foreach (IXLRange mergedRange in mergedRanges)\r\n                {\r\n                    if (mergedRange != null && mergedRange.Contains(nowCell))\r\n                    {\r\n                        range = mergedRange;\r\n                    }\r\n                }\r\n\r\n                if (range != null)\r\n                {\r\n                    titleValueCell = range.Cell(1, 1);\r\n                }\r\n                else\r\n                {\r\n                    titleValueCell = nowCell;\r\n                }\r\n                if (titleValueCellList.Contains(titleValueCell))\r\n                {\r\n                    continue;\r\n                }\r\n                titleValueCellList.Add(titleValueCell);\r\n\r\n                if (titleDic.ContainsKey(titleValueCell.Value.ToString()))\r\n                {\r\n                    int count = 2;\r\n                    while (titleDic.ContainsKey(titleValueCell.Value.ToString() + count))\r\n                    {\r\n                        ++count;\r\n                    }\r\n                    titleDic.Add(titleValueCell.Value.ToString() + count, i);\r\n                }\r\n                else\r\n                {\r\n                    titleDic.Add(titleValueCell.Value.ToString(), i);\r\n                }\r\n            }\r\n\r\n\r\n            List<int> resLineList = new List<int>();\r\n\r\n\r\n            string searchParamsStr = paramDic[\"sbt_v\"];\r\n            List<string> searchParams = new List<string>(searchParamsStr.Split('&'));\r\n            foreach (string param in searchParams)\r\n            {\r\n                string key = param.Split('-')[0];\r\n                string value = param.Split('-')[1];\r\n\r\n                List<int> resLineListTemp = new List<int>();\r\n                if (titleDic.ContainsKey(key))\r\n                {\r\n                    IXLColumn column = sheet.Column(titleDic[key]);\r\n\r\n                    int lastUsedCellRowNumber = column.LastCellUsed().Address.RowNumber;\r\n                    for (int i = titleLineNum + 1; i < lastUsedCellRowNumber; ++i)\r\n                    {\r\n                        IXLCell cell = sheet.Cell(i, titleDic[key]);\r\n                        if (cell.Value.ToString() == value)\r\n                        {\r\n                            if (!resLineListTemp.Contains(cell.Address.RowNumber))\r\n                            {\r\n                                resLineListTemp.Add(cell.Address.RowNumber);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (resLineList != null && resLineList.Count > 0)\r\n                {\r\n                    List<int> resLineListNew = new List<int>();\r\n                    foreach (int line in resLineList)\r\n                    {\r\n                        if (resLineListTemp.Contains(line))\r\n                        {\r\n                            resLineListNew.Add(line);\r\n                        }\r\n                    }\r\n                    resLineList = resLineListNew;\r\n                }\r\n                else\r\n                {\r\n                    resLineList = resLineListTemp;\r\n                }\r\n            }\r\n\r\n            List<IXLRow> resRows = new List<IXLRow>();\r\n\r\n            int titleRowFrom = -1;\r\n            int titleRowTo = -1;\r\n            foreach (IXLCell cell in titleValueCellList)\r\n            {\r\n                int row = cell.Address.RowNumber;\r\n\r\n                if (titleRowFrom == -1 || titleRowFrom > row)\r\n                {\r\n                    titleRowFrom = row;\r\n                }\r\n                if (titleRowTo == -1 || titleRowTo < row)\r\n                {\r\n                    titleRowTo = row;\r\n                }\r\n            }\r\n            if (titleLineNum > titleRowTo)\r\n            {\r\n                titleRowTo = titleLineNum;\r\n            }\r\n\r\n            for (int i = titleRowFrom; i <= titleRowTo; ++i)\r\n            {\r\n                resRows.Add(sheet.Row(i));\r\n            }\r\n            foreach (int line in resLineList)\r\n            {\r\n                resRows.Add(sheet.Row(line));\r\n            }\r\n\r\n            result[ResultType.RESULTOBJECT] = resRows;\r\n            // globalObject = resRows;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 在所有输出前调用\r\n        /// </summary>\r\n        /// <param name=\"paramDic\">传入的参数</param>\r\n        /// <param name=\"workbook\">用于输出的excel文件</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"resultList\">所有文件的信息</param>\r\n        /// <param name=\"allFilePathList\">分析的所有文件路径列表</param>\r\n        public void RunBeforeSetResult(Dictionary<string, string> paramDic, XLWorkbook workbook, ref Object globalObject, ICollection<ConcurrentDictionary<ResultType, Object>> resultList, List<string> allFilePathList)\r\n        {\r\n            Logger.Info(\"Search By Title RunBeforeSetResult Start\");\r\n            Logger.Info(\"Search By Title RunBeforeSetResult End\");\r\n        }\r\n\r\n        /// <summary>\r\n        /// 根据分析结果输出到excel中\r\n        /// </summary>\r\n        /// <param name=\"paramDic\">传入的参数</param>\r\n        /// <param name=\"workbook\">用于输出的excel文件</param>\r\n        /// <param name=\"result\">存储当前文件的信息 ResultType { (String) FILEPATH [文件路径], (String) FILENAME [文件名], (String) MESSAGE [当查找时出现问题时输出的消息], (Object) RESULTOBJECT [用户自定的分析结果] }</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"invokeCount\">此输出函数被调用的次数</param>\r\n        /// <param name=\"totalCount\">总共需要调用的输出函数的次数</param>\r\n        public void SetResult(Dictionary<string, string> paramDic, XLWorkbook workbook, ConcurrentDictionary<ResultType, Object> result, ref Object globalObject, int invokeCount, int totalCount)\r\n        {\r\n            Logger.Info(\"Set Result Start No.\" + invokeCount.ToString() + \", \" + result[ResultType.FILENAME]);\r\n            if(result.ContainsKey(ResultType.MESSAGE))\r\n            {\r\n                string messgae = (string)result[ResultType.MESSAGE];\r\n                if(messgae != null && messgae != \"\")\r\n                {\r\n                    Logger.Error(messgae);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            IXLWorksheet sheet = workbook.AddWorksheet(\"Search Res \" + invokeCount.ToString());\r\n            sheet.Cell(1, 1).Value = result[ResultType.FILENAME].ToString();\r\n\r\n            // List<IXLRow> resRows = (List<IXLRow>)globalObject;\r\n            List<IXLRow> resRows = (List<IXLRow>)result[ResultType.RESULTOBJECT];\r\n\r\n            int nowLine = 2;\r\n            foreach (IXLRow row in resRows)\r\n            {\r\n                bool isCopyCellFailed = false;\r\n                try\r\n                {\r\n                    row.CopyTo(sheet.Row(nowLine));\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    Logger.Warn(\"Copy Failed Row \" + row.RowNumber().ToString() + \", [\" + e.Message + \"]\");\r\n                    Logger.Info(\"Trying copy by each cell. \");\r\n                    int lastColNum = row.LastCellUsed().Address.ColumnNumber;\r\n                    for (int i = 1; i <= lastColNum; ++i)\r\n                    {\r\n                        try\r\n                        {\r\n                            row.Cell(i).CopyTo(sheet.Row(nowLine).Cell(i));\r\n                        }\r\n                        catch (Exception ex)\r\n                        {\r\n                            Logger.Error(\"Copy Failed Cell \" + row.RowNumber().ToString() + \", \" + i.ToString() + \", [\" + ex.Message + \"]\");\r\n                            isCopyCellFailed = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if(isCopyCellFailed)\r\n                    {\r\n                        continue;\r\n                    }\r\n                    Logger.Info(\"Copy by each cell ok. \");\r\n                }\r\n                ++nowLine;\r\n            }\r\n            \r\n            IXLColumns colUsed = sheet.ColumnsUsed();\r\n            foreach(IXLColumn col in colUsed)\r\n            {\r\n                if(col.ColumnNumber() == 1)\r\n                {\r\n                    continue;\r\n                }\r\n                Logger.Info(\"Adjust: \" + col.ColumnNumber().ToString());\r\n                col.AdjustToContents(1, nowLine);\r\n            }\r\n            \r\n            if(invokeCount == totalCount)\r\n            {\r\n                Logger.Info(\"All done. \");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 所有调用结束后调用\r\n        /// </summary>\r\n        /// <param name=\"paramDic\">传入的参数</param>\r\n        /// <param name=\"workbook\">用于输出的excel文件</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"resultList\">所有文件的信息</param>\r\n        /// <param name=\"allFilePathList\">分析的所有文件路径列表</param>\r\n        public void RunEnd(Dictionary<string, string> paramDic, XLWorkbook workbook, ref Object globalObject, ICollection<ConcurrentDictionary<ResultType, Object>> resultList, List<string> allFilePathList)\r\n        {\r\n            Logger.Info(\"RunEnd Start\");\r\n            Logger.Info(\"RunEnd End\");\r\n        }\r\n    }\r\n}\r\n"}