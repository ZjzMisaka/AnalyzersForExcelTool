{"name":"search_str","code":"using ClosedXML.Excel;\r\nusing GlobalObjects;\r\nusing System;\r\nusing System.Collections.Concurrent;\r\nusing System.Collections.Generic;\r\n\r\nnamespace AnalyzeCode\r\n{\r\n    class SearchRes\r\n    {\r\n        public int totalCount;\r\n        public int cellCount;\r\n        public List<KeyValuePair<IXLAddress, List<string>>> cellsAddressAndEachCountAndValue;\r\n        public string fileName;\r\n        public string sheetName;\r\n        public string sheetCell;\r\n        public int totalCellCount;\r\n        \r\n        public SearchRes()\r\n        {\r\n            totalCount = 0;\r\n            cellCount = 0;\r\n            cellsAddressAndEachCountAndValue = new List<KeyValuePair<IXLAddress, List<string>>>();\r\n            fileName = \"\";\r\n            sheetName = \"\";\r\n            sheetCell = \"\";\r\n            totalCellCount = 0;\r\n        }\r\n    }\r\n        \r\n    class Analyze\r\n    {\r\n        /// <summary>\r\n        /// 在所有分析前调用\r\n        /// </summary>\r\n        /// <param name=\"param\">传入的参数</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"allFilePathList\">将会分析的所有文件路径列表</param>\r\n        public void RunBeforeAnalyzeSheet(Param param, ref Object globalObject, List<string> allFilePathList)\r\n        {\r\n            Logger.Info(\"Running Search Str\");\r\n            Logger.Info(\"RunBeforeAnalyzeSheet Start\");\r\n            if(param.GetOne(\"ss_k\") == null)\r\n            {\r\n                Logger.Warn(\"未传入检索关键字参数\");\r\n                Scanner.GetInput(\"请输入检索关键字\");\r\n            }\r\n            else\r\n            {\r\n                Logger.Info(\"正在检索关键字: \" + param.GetOne(\"ss_k\"));\r\n            }\r\n            Logger.Info(\"RunBeforeAnalyzeSheet End\");\r\n        }\r\n    \r\n        /// <summary>\r\n        /// 分析一个sheet\r\n        /// </summary>\r\n        /// <param name=\"param\">传入的参数</param>\r\n        /// <param name=\"sheet\">被分析的sheet</param>\r\n        /// <param name=\"result\">存储当前文件的信息 ResultType { (String) FILEPATH [文件路径], (String) FILENAME [文件名], (String) MESSAGE [当查找时出现问题时输出的消息], (Object) RESULTOBJECT [用户自定的分析结果] }</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"invokeCount\">此分析函数被调用的次数</param>\r\n        public void AnalyzeSheet(Param param, IXLWorksheet sheet, ConcurrentDictionary<ResultType, Object> result, ref Object globalObject, int invokeCount)\r\n        {\r\n            Logger.Info(\"AnalyzeSheet\" + invokeCount + \": \" + sheet.Name);\r\n            \r\n            string searchKey = param.GetOne(\"ss_k\");\r\n            if(searchKey == null)\r\n            {\r\n                searchKey = Scanner.LastInputValue;\r\n            }\r\n            List<string> option = param.Get(\"option\");\r\n            \r\n            SearchRes searchRes = new SearchRes();\r\n            searchRes.sheetName = sheet.Name;\r\n            \r\n            IXLCells cellsUsed = sheet.CellsUsed();\r\n            int totalCellCount = 0;\r\n            foreach (IXLCell cell in cellsUsed)\r\n            {\r\n                ++totalCellCount;\r\n                string cellValue = cell.CachedValue.ToString();\r\n                if(option.Contains(\"IgnoreCase\"))\r\n                {\r\n                    cellValue = cellValue.ToLowerInvariant();\r\n                }\r\n                if(option.Contains(\"IgnoreSpace\"))\r\n                {\r\n                    cellValue = cellValue.Replace(\" \", \"\");\r\n                }\r\n                if(cellValue.Contains(searchKey))\r\n                {\r\n                    ++searchRes.cellCount;\r\n                    string strReplaced = cellValue.Replace(searchKey, \"\");\r\n                    int count = (cellValue.Length - strReplaced.Length) / searchKey.Length;\r\n                    searchRes.totalCount += count;\r\n                    KeyValuePair<IXLAddress, List<string>> cellsAddressAndEachCountAndValue = new KeyValuePair<IXLAddress, List<string>>(cell.Address, new List<string>(){count.ToString(), cellValue});\r\n                    searchRes.cellsAddressAndEachCountAndValue.Add(cellsAddressAndEachCountAndValue);\r\n                }\r\n            }\r\n            searchRes.totalCellCount = totalCellCount;\r\n            \r\n            if(!result.ContainsKey(ResultType.RESULTOBJECT))\r\n            {\r\n                result[ResultType.RESULTOBJECT] = new List<SearchRes>();\r\n            }\r\n            \r\n            ((List<SearchRes>)result[ResultType.RESULTOBJECT]).Add(searchRes);\r\n            \r\n            Logger.Info(\"AnalyzeSheet\" + invokeCount + \": \" + sheet.Name + \" End\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 在所有输出前调用\r\n        /// </summary>\r\n        /// <param name=\"param\">传入的参数</param>\r\n        /// <param name=\"workbook\">用于输出的excel文件</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"resultList\">所有文件的信息</param>\r\n        /// <param name=\"allFilePathList\">分析的所有文件路径列表</param>\r\n        public void RunBeforeSetResult(Param param, XLWorkbook workbook, ref Object globalObject, ICollection<ConcurrentDictionary<ResultType, Object>> resultList, List<string> allFilePathList)\r\n        {\r\n            Logger.Info(\"RunBeforeSetResult Start\");\r\n            Logger.Info(\"准备输出结果\");\r\n            workbook.AddWorksheet(\"合计\");\r\n            globalObject = new List<KeyValuePair<string, List<SearchRes>>>();\r\n            Logger.Info(\"RunBeforeSetResult End\");\r\n        }\r\n\r\n        /// <summary>\r\n        /// 根据分析结果输出到excel中\r\n        /// </summary>\r\n        /// <param name=\"param\">传入的参数</param>\r\n        /// <param name=\"workbook\">用于输出的excel文件</param>\r\n        /// <param name=\"result\">存储当前文件的信息 ResultType { (String) FILEPATH [文件路径], (String) FILENAME [文件名], (String) MESSAGE [当查找时出现问题时输出的消息], (Object) RESULTOBJECT [用户自定的分析结果] }</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"invokeCount\">此输出函数被调用的次数</param>\r\n        /// <param name=\"totalCount\">总共需要调用的输出函数的次数</param>\r\n        public void SetResult(Param param, XLWorkbook workbook, ConcurrentDictionary<ResultType, Object> result, ref Object globalObject, int invokeCount, int totalCount)\r\n        {\r\n            Logger.Info(\"SetResult\" + invokeCount + \": \" + (string)result[ResultType.FILENAME]);\r\n            string fileName = (string)result[ResultType.FILENAME] + \" (\" + invokeCount + \")\";\r\n            if(fileName.Length > 31)\r\n            {\r\n                fileName = fileName.Substring(fileName.Length - 31);\r\n            }\r\n            IXLWorksheet sheet = workbook.AddWorksheet(fileName);\r\n            \r\n            int nowRow = 1;\r\n            List<SearchRes> resList = (List<SearchRes>)result[ResultType.RESULTOBJECT];\r\n            KeyValuePair<string, List<SearchRes>> kv = new KeyValuePair<string, List<SearchRes>>((string)result[ResultType.FILENAME], resList);\r\n            (globalObject as List<KeyValuePair<string, List<SearchRes>>>).Add(kv);\r\n            \r\n            string[] titles = {\"总单元格数\", \"匹配单元格数\", \"匹配单元格率\", \"字符串总匹配数\", \"匹配单元格\", \"单元格内匹配数\", \"值\"};\r\n            \r\n            foreach(SearchRes res in resList)\r\n            {\r\n                res.fileName = fileName;\r\n                Logger.Info(\"Sheet: \" + res.sheetName);\r\n                sheet.Cell(nowRow, 1).SetValue(\"Sheet name: \" + res.sheetName);\r\n                res.sheetCell = \"A\" + nowRow;\r\n                ++nowRow;\r\n                \r\n                for(int i = 0; i < titles.Length; ++i)\r\n                {\r\n                    int colNum = i + 1;\r\n                    sheet.Cell(nowRow, colNum).SetValue(titles[i]);\r\n                    sheet.Cell(nowRow, colNum).Style.Border.SetOutsideBorder(XLBorderStyleValues.Thin);\r\n                    sheet.Cell(nowRow, colNum).Style.Fill.BackgroundColor = XLColor.Yellow;\r\n                }\r\n                ++nowRow;\r\n                \r\n                List<KeyValuePair<IXLAddress, List<string>>> cellsAddressAndEachCountAndValue = res.cellsAddressAndEachCountAndValue;\r\n                int startRow = nowRow;\r\n                foreach(KeyValuePair<IXLAddress, List<string>> cellAddressAndEachCountAndValue in cellsAddressAndEachCountAndValue)\r\n                {\r\n                    IXLAddress address = cellAddressAndEachCountAndValue.Key;\r\n                    string[] values = {res.totalCellCount.ToString(), res.cellCount.ToString(), ((double)res.cellCount / res.totalCellCount * 100).ToString(\"#0.000\") + \"%\", res.totalCount.ToString(), address.ColumnLetter + address.RowNumber, cellAddressAndEachCountAndValue.Value[0], cellAddressAndEachCountAndValue.Value[1]};\r\n                    for(int i = 0; i < titles.Length; ++i)\r\n                    {\r\n                        int colNum = i + 1;\r\n                        sheet.Cell(nowRow, colNum).SetValue(values[i]);\r\n                        sheet.Cell(nowRow, colNum).Style.Border.SetOutsideBorder(XLBorderStyleValues.Thin);\r\n                        sheet.Cell(nowRow, colNum).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;\r\n                        sheet.Cell(nowRow, colNum).Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\r\n                    }\r\n                    \r\n                    sheet.Cell(nowRow, 5).FormulaA1 = \"=HYPERLINK(\\\"[\" + (string)result[ResultType.FILEPATH] + \"]\" + res.sheetName + \"!\" + address.ColumnLetter + address.RowNumber + \"\\\", \\\"\" + address.ColumnLetter + address.RowNumber + \"\\\")\";\r\n                    sheet.Cell(nowRow, 5).Style.Font.FontColor = XLColor.FromTheme(XLThemeColor.Hyperlink);\r\n                    sheet.Cell(nowRow, 5).Style.Font.Underline = XLFontUnderlineValues.Single;\r\n                    \r\n                    string searchKey = param.GetOne(\"ss_k\");\r\n                    if(searchKey == null)\r\n                    {\r\n                        searchKey = Scanner.LastInputValue;\r\n                    }\r\n                    int startIndex = 0;\r\n                    while(values[6].IndexOf(searchKey, startIndex) != -1)\r\n                    {\r\n                       int index = values[6].IndexOf(searchKey, startIndex);\r\n                       startIndex = index + 1;\r\n                       sheet.Cell(nowRow, 7).RichText.Substring(index, searchKey.Length).SetBold().SetFontColor(XLColor.Red).SetUnderline().SetShadow(true);\r\n                    }\r\n                    ++nowRow;\r\n                }\r\n                if(cellsAddressAndEachCountAndValue.Count == 0)\r\n                {\r\n                    sheet.Cell(nowRow, 1).SetValue(res.totalCellCount);\r\n                    sheet.Cell(nowRow, 2).SetValue(res.cellCount);\r\n                    sheet.Cell(nowRow, 3).SetValue(res.totalCellCount == 0 ? \"-\" : ((double)res.cellCount / res.totalCellCount * 100).ToString(\"#0.000\") + \"%\");\r\n                    sheet.Cell(nowRow, 4).SetValue(res.totalCount);\r\n                    for(int i = 0; i < titles.Length; ++i)\r\n                    {\r\n                        int colNum = i + 1;\r\n                        sheet.Cell(nowRow, colNum).Style.Border.SetOutsideBorder(XLBorderStyleValues.Thin);\r\n                    }\r\n                    ++nowRow;\r\n                }\r\n                \r\n                for(int i = 1; i <= 4; ++i)\r\n                {\r\n                    int endRow = nowRow - 1;\r\n                    if(endRow < startRow)\r\n                    {\r\n                       endRow = startRow;\r\n                    }\r\n                    IXLRange range = sheet.Range(sheet.Cell(startRow, i), sheet.Cell(endRow, i)).Merge();\r\n                    sheet.Cell(startRow, i).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);\r\n                    sheet.Cell(startRow, i).Style.Alignment.SetVertical(XLAlignmentVerticalValues.Top);\r\n                }\r\n                \r\n                ++nowRow;\r\n            }\r\n            \r\n            IXLColumns colUsed = sheet.ColumnsUsed();\r\n            foreach(IXLColumn col in colUsed)\r\n            {\r\n                col.Style.Alignment.WrapText = true;\r\n                col.AdjustToContents(1, nowRow);\r\n            }\r\n            \r\n            Logger.Info(\"SetResult\" + invokeCount + \": \" + (string)result[ResultType.FILENAME]+ \" End\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 所有调用结束后调用\r\n        /// </summary>\r\n        /// <param name=\"param\">传入的参数</param>\r\n        /// <param name=\"workbook\">用于输出的excel文件</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"resultList\">所有文件的信息</param>\r\n        /// <param name=\"allFilePathList\">分析的所有文件路径列表</param>\r\n        public void RunEnd(Param param, XLWorkbook workbook, ref Object globalObject, ICollection<ConcurrentDictionary<ResultType, Object>> resultList, List<string> allFilePathList)\r\n        {\r\n            Logger.Info(\"RunEnd Start\");\r\n            \r\n            string[] titles = {\"总单元格数\", \"匹配单元格数\", \"匹配单元格率\", \"字符串总匹配数\", \"匹配单元格\", \"单元格内匹配数\", \"值\"};\r\n            \r\n            int nowRowRes = 1;\r\n            IXLWorksheet sheetRes = workbook.Worksheet(\"合计\");\r\n            string searchKey = param.GetOne(\"ss_k\");\r\n            if(searchKey == null)\r\n            {\r\n                searchKey = Scanner.LastInputValue;\r\n            }\r\n            sheetRes.Cell(nowRowRes, 1).SetValue(\"检索关键词： \" + searchKey);\r\n            nowRowRes += 2;\r\n            List<KeyValuePair<string, List<SearchRes>>> fileInfList = (List<KeyValuePair<string, List<SearchRes>>>)globalObject;\r\n            string[] titlesRes = {\"总单元格数\", \"匹配单元格数\", \"匹配单元格率\", \"字符串总匹配数\"};\r\n            foreach(KeyValuePair<string, List<SearchRes>> fileInf in fileInfList)\r\n            {\r\n                string fileName = fileInf.Key;\r\n                Logger.Info(\"正在输出文件: \" + fileName + \" 的结果\");\r\n                sheetRes.Cell(nowRowRes, 1).SetValue(fileName);\r\n                sheetRes.Cell(nowRowRes, 1).Hyperlink = new XLHyperlink(\"'\" + fileInf.Value[0].fileName + \"'!A1\");\r\n                IXLRange mergeRange = sheetRes.Range(nowRowRes, 1, nowRowRes, titlesRes.Length + 1);\r\n                mergeRange.Style.Border.SetOutsideBorder(XLBorderStyleValues.Thin);\r\n                mergeRange.Merge();\r\n                ++nowRowRes;\r\n                for(int i = 0; i < titlesRes.Length; ++i)\r\n                 {\r\n                     int colNum = i + 2;\r\n                     sheetRes.Cell(nowRowRes, colNum).SetValue(titles[i]);\r\n                     sheetRes.Cell(nowRowRes, colNum).Style.Border.SetOutsideBorder(XLBorderStyleValues.Thin);\r\n                     sheetRes.Cell(nowRowRes, colNum).Style.Fill.BackgroundColor = XLColor.Yellow;\r\n                 }\r\n                 ++nowRowRes;\r\n                 \r\n                 int totalCellCountSum = 0;\r\n                 int cellCountSum = 0;\r\n                 int totalCountSum = 0;\r\n                 foreach(SearchRes searchRes in fileInf.Value)\r\n                 {\r\n                    Logger.Info(\"正在输出Sheet: \" + searchRes.sheetName + \" 的结果\");\r\n                    sheetRes.Cell(nowRowRes, 1).SetValue(searchRes.sheetName);\r\n                    sheetRes.Cell(nowRowRes, 1).Hyperlink = new XLHyperlink(\"'\" + searchRes.fileName + \"'!\" + searchRes.sheetCell);\r\n                    sheetRes.Cell(nowRowRes, 1).Style.Border.SetOutsideBorder(XLBorderStyleValues.Thin);\r\n                    string[] vals = {searchRes.totalCellCount.ToString(), searchRes.cellCount.ToString(), searchRes.totalCellCount == 0 ? \"-\" : ((double)searchRes.cellCount / searchRes.totalCellCount * 100).ToString(\"#0.000\") + \"%\", searchRes.totalCount.ToString()};\r\n                    totalCellCountSum += searchRes.totalCellCount;\r\n                    cellCountSum += searchRes.cellCount;\r\n                    totalCountSum += searchRes.totalCount;\r\n                    for(int i = 0; i < titlesRes.Length; ++i)\r\n                     {\r\n                         int colNum = i + 2;\r\n                         sheetRes.Cell(nowRowRes, colNum).SetValue(vals[i]);\r\n                         sheetRes.Cell(nowRowRes, colNum).Style.Border.SetOutsideBorder(XLBorderStyleValues.Thin);\r\n                     }\r\n                     ++nowRowRes;\r\n                 }\r\n                 \r\n                 \r\n                 sheetRes.Cell(nowRowRes, 1).SetValue(\"合计\");\r\n                 sheetRes.Cell(nowRowRes, 1).Style.Fill.BackgroundColor = XLColor.BrightGreen;\r\n                 sheetRes.Cell(nowRowRes, 1).Style.Border.SetOutsideBorder(XLBorderStyleValues.Thin);\r\n                 string[] valsSum = {totalCellCountSum.ToString(), cellCountSum.ToString(), ((double)cellCountSum / totalCellCountSum * 100).ToString(\"#0.000\") + \"%\", totalCountSum.ToString()};\r\n                 for(int i = 0; i < titlesRes.Length; ++i)\r\n                 {\r\n                     int colNum = i + 2;\r\n                     sheetRes.Cell(nowRowRes, colNum).SetValue(valsSum[i]);\r\n                     sheetRes.Cell(nowRowRes, colNum).Style.Fill.BackgroundColor = XLColor.BrightGreen;\r\n                     sheetRes.Cell(nowRowRes, colNum).Style.Border.SetOutsideBorder(XLBorderStyleValues.Thin);\r\n                 }\r\n                 nowRowRes += 2;\r\n            }\r\n            \r\n            IXLColumns colUsedRes = sheetRes.ColumnsUsed();\r\n            foreach(IXLColumn col in colUsedRes)\r\n            {\r\n                col.AdjustToContents(2, nowRowRes);\r\n            }\r\n            \r\n            Logger.Info(\"RunEnd End\");\r\n        }\r\n    }\r\n}\r\n","paramDic":{"ss_k":{"describe":"检索关键字","possibleValues":null,"type":2},"option":{"describe":"设置","possibleValues":[{"value":"IgnoreCase","describe":"不区分大小写"},{"value":"IgnoreSpace","describe":"忽略空格"}],"type":2}}}