{"name":"通过DB设计书生成代码与API设计书","code":"using ClosedXML.Excel;\nusing GlobalObjects;\nusing System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\n\nnamespace AnalyzeCode\n{\n    // DatabaseType Postgresql|SqlServer|MySQL|Oracle\n    // TableIDPos\n    // TableNamePos\n    // StartRowNum\n    // ColIDCol\n    // ColNameCol\n    // TypeCol\n    // DigitsCheckCol\n    // DecimalCheckCol\n    // NullCheckCol\n    \n    public static class Converter\n    {\n        public static Dictionary<string, string> postgresqlDic = new Dictionary<string, string>() \n        {\n            {\"date\", \"LocalDate\"},\n            {\"time\", \"LocalTime\"},\n            {\"timestamp without timezone\", \"LocalDateTime\"},\n            {\"timestamp with timezone\", \"OffsetDateTime\"},\n            {\"varchar\", \"String\"},\n            {\"text\", \"String\"},\n            {\"int2\", \"Integer\"},\n            {\"int4\", \"Integer\"},\n            {\"int8\", \"Long\"},\n            {\"float4\", \"Float\"},\n            {\"float8\", \"Double\"},\n            {\"numeric\", \"BigDecimal\"},\n            {\"bool\", \"Boolean\"},\n        };\n        \n        public static Dictionary<string, string> sqlServerDic = new Dictionary<string, string>() \n        {\n            {\"\", \"\"}\n        };\n        \n        public static Dictionary<string, string> mySqlDic = new Dictionary<string, string>() \n        {\n            {\"\", \"\"}\n        };\n        \n        public static Dictionary<string, string> oracleDic = new Dictionary<string, string>() \n        {\n            {\"\", \"\"}\n        };\n    }\n    \n    public class Table\n    {\n        public string tableID;\n        public string tableName;\n        \n        public List<Column> columnList;\n        \n        public Table(string tableID, string tableName, List<Column> columnList)\n        {\n            this.tableID = tableID;\n            this.tableName = tableName;\n            this.columnList = columnList;\n        }\n    }\n    \n    public class Column\n    {\n        public string colID;\n        public string colName;\n        public string type;\n        public int digitsCheck;\n        public int decimalCheck;\n        public bool notNull;\n        \n        public Column(string colID, string colName, string type, int digitsCheck, int decimalCheck, bool notNull = false)\n        {\n            this.colID = colID;\n            this.colName = colName;\n            this.type = type;\n            this.digitsCheck = digitsCheck;\n            this.decimalCheck = decimalCheck;\n            this.notNull = notNull;\n        }\n    }\n    \n    public class Analyze\n    {\n        /// <summary>\n        /// 在所有分析前调用\n        /// </summary>\n        /// <param name=\"param\">传入的参数</param>\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\n        /// <param name=\"allFilePathList\">将会分析的所有文件路径列表</param>\n        /// <param name=\"isExecuteInSequence\">是否顺序执行</param>\n        public void RunBeforeAnalyzeSheet(Param param, ref Object globalObject, List<string> allFilePathList, bool isExecuteInSequence)\n        {\n            Output.IsSaveDefaultWorkBook = false;\n            globalObject = new List<Table>();\n        }\n\n        /// <summary>\n        /// 分析一个sheet\n        /// </summary>\n        /// <param name=\"param\">传入的参数</param>\n        /// <param name=\"sheet\">被分析的sheet</param>\n        /// <param name=\"filePath\">文件路径</param>\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\n        /// <param name=\"isExecuteInSequence\">是否顺序执行</param>\n        /// <param name=\"invokeCount\">此分析函数被调用的次数</param>\n        public void AnalyzeSheet(Param param, IXLWorksheet sheet, string filePath, ref Object globalObject, bool isExecuteInSequence, int invokeCount)\n        {\n            string tableIDPos = param.GetOne(\"TableIDPos\");\n            string tableNamePos = param.GetOne(\"TableNamePos\");\n            int currentRowNum = int.Parse(param.GetOne(\"StartRowNum\"));\n            string colIDCol = param.GetOne(\"ColIDCol\");\n            string colNameCol = param.GetOne(\"ColNameCol\");\n            string typeCol = param.GetOne(\"TypeCol\");\n            string digitsCheckCol = param.GetOne(\"DigitsCheckCol\");\n            string decimalCheckCol = param.GetOne(\"DecimalCheckCol\");\n            string nullCheckCol = param.GetOne(\"NullCheckCol\");\n            string tableID = sheet.Cell(tableIDPos).CachedValue.ToString();\n            \n            string tableName = string.IsNullOrWhiteSpace(tableNamePos) ? \"\" :  sheet.Cell(tableNamePos).CachedValue.ToString();\n            \n            Table table = new Table(tableID, tableName, new List<Column>());\n            \n            while (CellNotBlank(sheet.Cell(colIDCol + currentRowNum)))\n            {\n                string colID = sheet.Cell(colIDCol + currentRowNum).CachedValue.ToString();\n                string colName = string.IsNullOrWhiteSpace(colNameCol) ? \"\" :  sheet.Cell(colNameCol + currentRowNum).CachedValue.ToString();\n                string type = sheet.Cell(typeCol + currentRowNum).CachedValue.ToString();\n                int digitsCheck = string.IsNullOrWhiteSpace(digitsCheckCol) ? -1 :  int.Parse(sheet.Cell(digitsCheckCol + currentRowNum).CachedValue.ToString());\n                int decimalCheck = string.IsNullOrWhiteSpace(decimalCheckCol) ? -1 :  int.Parse(sheet.Cell(decimalCheckCol + currentRowNum).CachedValue.ToString());\n                bool notNull = CheckIfStringIsTrue(sheet.Cell(nullCheckCol + currentRowNum).CachedValue.ToString());\n                \n                table.columnList.Add(new Column(colID, colName, type, digitsCheck, decimalCheck, notNull));\n                \n                ++currentRowNum;\n            }\n            \n            ((List<Table>)globalObject).Add(table);\n        }\n\n        /// <summary>\n        /// 在所有输出前调用\n        /// </summary>\n        /// <param name=\"param\">传入的参数</param>\n        /// <param name=\"workbook\">用于输出的excel文件</param>\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\n        /// <param name=\"allFilePathList\">分析的所有文件路径列表</param>\n        /// <param name=\"isExecuteInSequence\">是否顺序执行</param>\n        public void RunBeforeSetResult(Param param, XLWorkbook workbook, ref Object globalObject, List<string> allFilePathList, bool isExecuteInSequence)\n        {\n            \n        }\n\n        /// <summary>\n        /// 根据分析结果输出到excel中\n        /// </summary>\n        /// <param name=\"param\">传入的参数</param>\n        /// <param name=\"workbook\">用于输出的excel文件</param>\n        /// <param name=\"filePath\">文件路径</param>\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\n        /// <param name=\"isExecuteInSequence\">是否顺序执行</param>\n        /// <param name=\"invokeCount\">此输出函数被调用的次数</param>\n        /// <param name=\"totalCount\">总共需要调用的输出函数的次数</param>\n        public void SetResult(Param param, XLWorkbook workbook, string filePath, ref Object globalObject, bool isExecuteInSequence, int invokeCount, int totalCount)\n        {\n            List<Table> tableList = (List<Table>)globalObject;\n            foreach (Table table in tableList)\n            {\n                MakeEntityFile(table, param, Output.OutputPath);\n                // MakeMapperFile\n                // ConvertMapperIntoExcel\n            }\n        }\n\n        /// <summary>\n        /// 所有调用结束后调用\n        /// </summary>\n        /// <param name=\"param\">传入的参数</param>\n        /// <param name=\"workbook\">用于输出的excel文件</param>\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\n        /// <param name=\"allFilePathList\">分析的所有文件路径列表</param>\n        /// <param name=\"isExecuteInSequence\">是否顺序执行</param>\n        public void RunEnd(Param param, XLWorkbook workbook, ref Object globalObject, List<string> allFilePathList, bool isExecuteInSequence)\n        {\n            \n        }\n        \n        public bool CellNotBlank(IXLCell cell)\n        {\n            if (string.IsNullOrWhiteSpace(cell.CachedValue.ToString()))\n            {\n                return false;\n            }\n        \n            return true;\n        }\n        \n        public bool CheckIfStringIsTrue(string str)\n        {\n            str = str.ToLower().Trim();\n            if (str == \"true\" || str == \"〇\" || str == \"○\")\n            {\n                return true;\n            }\n            return false;\n        }\n        \n        public string UnderScoreCaseToCamelCase(string str, bool isUpperCamelCase = false)\n        {\n            str = str.ToLower().Trim();\n            while (str.Contains(\"_\"))\n            {\n                int index = str.IndexOf('_');\n                string upper = str[index + 1].ToString().ToUpper();\n                str = str.Remove(index, 2);\n                str = str.Insert(index, upper);\n            }\n            \n            if (isUpperCamelCase)\n            {\n                string upper = str[0].ToString().ToUpper();\n                str = str.Remove(0, 1);\n                str = str.Insert(0, upper);\n            }\n            \n            return str;\n        }\n        \n        long LongRandom(long min, long max, Random rand) \n        {\n            byte[] buf = new byte[8];\n            rand.NextBytes(buf);\n            long longRand = BitConverter.ToInt64(buf, 0);\n            return (Math.Abs(longRand % (max - min)) + min);\n        }\n        \n        public string MakeLevel(int level)\n        {\n            string res = \"\";\n            for (int i = 0; i < level; ++i)\n            {\n                res += \"    \";\n            }\n            return res;\n        }\n        \n        public void MakeDocComment(List<string> strList, List<string> commentList, int level)\n        {\n            strList.Add(MakeLevel(level) + \"/**\");\n            foreach(string comment in commentList)\n            {\n                strList.Add(MakeLevel(level) + \" * \" + comment);\n            }\n            strList.Add(MakeLevel(level) + \" */\");\n        }\n        \n        public void MakeAnnotation(List<string> strList, Column column, int level)\n        {\n            if (column.notNull)\n            {\n                strList.Add(MakeLevel(level) + \"@NotBlank\");\n            }\n        }\n        \n        public void MakeProperty(List<string> strList, Column column, int level, Param param, List<string> importList)\n        {\n            Dictionary<string, string> convertDic = null;\n            if (param.GetOne(\"DatabaseType\") == \"Postgresql\")\n            {\n                convertDic = Converter.postgresqlDic;\n            }\n        \n            string type = column.type.ToLower();\n            bool done = false;\n            foreach (string key in convertDic.Keys)\n            {\n                if (type == key)\n                {\n                    type = convertDic[key];\n                    CheckAndAddImportList(type, importList);\n                    done = true;\n                    break;\n                }\n            }\n            if (!done)\n            {\n                foreach (string key in convertDic.Keys)\n                {\n                    if (type.StartsWith(key))\n                    {\n                        type = convertDic[key];\n                        CheckAndAddImportList(type, importList);\n                        break;\n                    }\n                }\n            }\n            \n            strList.Add(MakeLevel(level) + \"private \" + type + \" \" + UnderScoreCaseToCamelCase(column.colID) + \";\");\n        }\n        \n        public void CheckAndAddImportList(string type, List<string> importList)\n        {\n            if (type == \"LocalDateTime\")\n            {\n                string str = \"import java.time.LocalDateTime;\";\n                if (!importList.Contains(str))\n                {\n                    importList.Add(str);\n                }\n            }\n            else if (type == \"OffsetDateTime\")\n            {\n                string str = \"import java.time.OffsetDateTime;\";\n                if (!importList.Contains(str))\n                {\n                    importList.Add(str);\n                }\n            }\n            else if (type == \"LocalDate\")\n            {\n                string str = \"import java.time.LocalDate;\";\n                if (!importList.Contains(str))\n                {\n                    importList.Add(str);\n                }\n            }\n            else if (type == \"LocalTime\")\n            {\n                string str = \"import java.time.LocalTime;\";\n                if (!importList.Contains(str))\n                {\n                    importList.Add(str);\n                }\n            }\n            else if (type == \"BigDecimal\")\n            {\n                string str = \"import java.math.BigDecimal;\";\n                if (!importList.Contains(str))\n                {\n                    importList.Add(str);\n                }\n            }\n        }\n        \n        public void MakeEntityFile(Table table, Param param, string path)\n        {\n            List<string> body = new List<string>();\n            List<string> importList = new List<string>() { \"\", \"import lombok.Data;\", \"import java.io.Serializable;\" };\n            MakeEntityPackage(body, param);\n            body.Add(\"@Data\");\n            MakeEntityClassBody(table, body, param, importList);\n            \n            importList.Add(\"\");\n            body.InsertRange (1, importList);\n            \n            string outputPath = System.IO.Path.Combine(path, UnderScoreCaseToCamelCase(table.tableID, true) + \"Entity.java\");\n            Logger.Info(\"Write into: \" + outputPath + \"...\");\n            System.IO.File.WriteAllLines(outputPath, body);\n            Logger.Info(\"OK\");\n        }\n        \n        public void MakeEntityPackage(List<string> body, Param param)\n        {\n            body.Add(\"package \" + param.GetOne(\"EntityPackage\") + \";\");\n        }\n        \n        public void MakeEntityClassBody(Table table, List<string> body, Param param, List<string> importList)\n        {\n            body.Add(\"public class \" + UnderScoreCaseToCamelCase(table.tableID, true) + \"Entity\" + \" implements Serializable {\");\n            body.Add(\"    private static final long serialVersionUID = \" + LongRandom(long.MinValue, long.MaxValue, new Random()) + \"L;\");\n            \n            foreach (Column column in table.columnList)\n            {\n                body.Add(\"\");\n                MakeDocComment(body, new List<string>() {column.colName}, 1);\n                MakeAnnotation(body, column, 1);\n                MakeProperty(body, column, 1, param, importList);\n            }\n            \n            body.Add(\"}\");\n        }\n    }\n}","paramDic":{"EntityPackage":{"describe":"Entity包名","possibleValues":null,"type":2},"DatabaseType":{"describe":"数据库类型","possibleValues":[{"value":"Postgresql","describe":null},{"value":"SqlServer","describe":null},{"value":"MySQL","describe":null},{"value":"Oracle","describe":null}],"type":1},"TableIDPos":{"describe":"表物理名坐标","possibleValues":null,"type":2},"TableNamePos":{"describe":"表逻辑名坐标, 可空","possibleValues":null,"type":2},"StartRowNum":{"describe":"起始行数","possibleValues":null,"type":2},"ColIDCol":{"describe":"列物理名起始列","possibleValues":null,"type":2},"ColNameCol":{"describe":"列逻辑名起始列 可空","possibleValues":null,"type":2},"TypeCol":{"describe":"类型起始列","possibleValues":null,"type":2},"DigitsCheckCol":{"describe":"位数起始列, 可空","possibleValues":null,"type":2},"DecimalCheckCol":{"describe":"小数起始列, 可空","possibleValues":null,"type":2},"NullCheckCol":{"describe":"非空制约起始列, 可空","possibleValues":null,"type":2}}}