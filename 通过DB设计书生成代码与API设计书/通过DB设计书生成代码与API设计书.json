{"name":"通过DB设计书生成代码与API设计书","code":"using ClosedXML.Excel;\nusing GlobalObjects;\nusing GlobalObjects.Model;\nusing System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\n\nnamespace AnalyzeCode\n{\n    public static class Converter\n    {\n        public enum DicType { DesignBookType, DatabaseType };\n        \n        public static Dictionary<string, string> postgresqlDic = new Dictionary<string, string>() \n        {\n            {\"date\", \"LocalDate\"},\n            {\"time\", \"LocalTime\"},\n            {\"timestamp without timezone\", \"LocalDateTime\"},\n            {\"timestamp with timezone\", \"OffsetDateTime\"},\n            {\"varchar\", \"String\"},\n            {\"text\", \"String\"},\n            {\"int2\", \"Integer\"},\n            {\"int4\", \"Integer\"},\n            {\"int8\", \"Long\"},\n            {\"float4\", \"Float\"},\n            {\"float8\", \"Double\"},\n            {\"numeric\", \"BigDecimal\"},\n            {\"bool\", \"Boolean\"},\n        };\n        \n        public static Dictionary<string, string> sqlServerDic = new Dictionary<string, string>() \n        {\n            {\"binary\", \"byte[]\"},\n            {\"bit\", \"long\"},\n            {\"char\", \"long\"},\n            {\"date\", \"long\"},\n            {\"datetime\", \"Timestamp\"},\n            {\"decimal\", \"long\"},\n            {\"bigint\", \"BigDecimal\"},\n            {\"float\", \"double\"},\n            {\"image\", \"byte[]\"},\n            {\"int\", \"int\"},\n            {\"money\", \"BigDecimal\"},\n            {\"nchar\", \"String\"},\n            {\"ntext\", \"String\"},\n            {\"numeric\", \"BigDecimal\"},\n            {\"nvarchar\", \"long\"},\n            {\"real\", \"float\"},\n            {\"smalldatetime\", \"Timestamp\"},\n            {\"smallint\", \"short\"},\n            {\"smallmoney\", \"BigDecimal\"},\n            {\"text\", \"String\"},\n            {\"time\", \"Time\"},\n            {\"timestamp\", \"byte[]\"},\n            {\"tinyint\", \"short\"},\n            {\"udt\", \"byte[]\"},\n            {\"uniqueidentifier\", \"    String\"},\n            {\"varbinary\", \"byte[]\"},\n            {\"varchar\", \"String\"},\n            {\"xml\", \"String\"},\n            {\"sqlvariant\", \"Object\"},\n            {\"geometry\", \"byte[]\"},\n            {\"geography\", \"byte[]\"}\n        };\n        \n        public static Dictionary<string, string> mySqlDic = new Dictionary<string, string>() \n        {\n            {\"char\", \"String\"},\n            {\"varchar\", \"String\"},\n            {\"longvarchar\", \"String\"},\n            {\"numeric\", \"BigDecimal\"},\n            {\"decimal\", \"BigDecimal\"},\n            {\"bit\", \"boolean\"},\n            {\"tinyint\", \"byte\"},\n            {\"smallint\", \"short\"},\n            {\"integer\", \"int\"},\n            {\"bigint\", \"long\"},\n            {\"real\", \"float\"},\n            {\"float\", \"double\"},\n            {\"double\", \"double\"},\n            {\"binary\", \"byte[]\"},\n            {\"varbinary\", \"byte[]\"},\n            {\"longvarbinary\", \"byte[]\"},\n            {\"date\", \"Date\"},\n            {\"time\", \"String\"},\n            {\"timestamp\", \"Timestamp\"}\n        };\n        \n        public static Dictionary<string, string> oracleDic = new Dictionary<string, string>() \n        {\n            {\"char\", \"String\"},\n            {\"varchar2\", \"String\"},\n            {\"long\", \"String\"},\n            {\"number\", \"BigDecimal\"},\n            {\"number(1)\", \"boolean\"},\n            {\"number(2)\", \"Byte\"},\n            {\"number(3~4)\", \"Short\"},\n            {\"number(5~9)\", \"Integer\"},\n            {\"number(10~18)\", \"long\"},\n            {\"number(19~38)\", \"BigDecimal\"},\n            {\"date\", \"Timestamp\"},\n            {\"timestamp\", \"Timestamp\"},\n            {\"raw\", \"byte[]\"},\n            {\"longraw\", \"byte[]\"}\n        };\n    }\n    \n    public static class ForCopy\n    {\n        public static XLWorkbook defaultWb = new XLWorkbook();\n        public static IXLWorksheet forCopySheet1;\n        public static IXLWorksheet forCopySheet2 ;\n        public static IXLWorksheet defaultSheet;\n            \n        public static void InitSheetForCopy()\n        {\n            IXLRange rangeTemp = null;\n            forCopySheet1 = defaultWb.AddWorksheet(\"ForCopy1\");\n            forCopySheet2 = defaultWb.AddWorksheet(\"ForCopy2\");\n            defaultSheet = defaultWb.AddWorksheet(\"Base\");\n            defaultSheet.Columns().Width = 2.25;\n            defaultSheet.Column(\"Q\").Width = 7.5;\n            defaultSheet.Column(\"AA\").Width = 6.5;\n            defaultSheet.Column(\"AK\").Width = 15;\n            \n            rangeTemp = forCopySheet1.Range(\"B1\", \"B8\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet1.Range(\"C1\", \"G1\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"修飾子\");\n            \n            rangeTemp = forCopySheet1.Range(\"C2\", \"G2\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"メソッド名\");\n            \n            rangeTemp = forCopySheet1.Range(\"C3\", \"C8\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet1.Range(\"D3\", \"G3\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"処理概要\");\n            \n            rangeTemp = forCopySheet1.Range(\"D4\", \"G4\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"例外\");\n            \n            rangeTemp = forCopySheet1.Range(\"D5\", \"G5\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"戻り値\");\n            \n            rangeTemp = forCopySheet1.Range(\"D6\", \"G6\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"パラメータ\");\n            \n            rangeTemp = forCopySheet1.Range(\"D7\", \"G8\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"処理詳細\");\n            \n            rangeTemp = forCopySheet1.Range(\"H1\", \"AX1\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"public\");\n            \n            rangeTemp = forCopySheet1.Range(\"H2\", \"AX2\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet1.Range(\"H3\", \"AX3\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet1.Range(\"H4\", \"AX4\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"-\");\n            \n            rangeTemp = forCopySheet1.Range(\"H5\", \"J5\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"型\");\n            \n            rangeTemp = forCopySheet1.Range(\"K5\", \"AX5\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet1.Range(\"H6\", \"J6\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"型\");\n            \n            rangeTemp = forCopySheet1.Range(\"H7\", \"AX7\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet1.Range(\"K6\", \"Q6\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet1.Range(\"R6\", \"T6\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"引数名\");\n            \n            rangeTemp = forCopySheet1.Range(\"U6\", \"AA6\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet1.Range(\"AB6\", \"AD6\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"説明\");\n            \n            rangeTemp = forCopySheet1.Range(\"AE6\", \"AX6\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet1.Range(\"I8\", \"Q8\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(240, 247, 236);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"SQLID\");\n            \n            rangeTemp = forCopySheet1.Range(\"R8\", \"AW8\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet1.Range(\"AX8\", \"AX8\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet1.Range(\"B11\", \"B11\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet1.Range(\"C11\", \"C11\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet1.Range(\"D11\", \"G11\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet1.Range(\"H11\", \"AX11\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet2.Range(\"B2\", \"B2\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet2.Range(\"C2\", \"C2\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet2.Range(\"D2\", \"G2\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet2.Range(\"I2\", \"Q2\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(240, 247, 236);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet2.Range(\"R2\", \"S2\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(240, 247, 236);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"No.\");\n            \n            rangeTemp = forCopySheet2.Range(\"T2\", \"AW2\");\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(240, 247, 236);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet2.Range(\"AX2\", \"AX2\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet2.Range(\"B4\", \"B4\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet2.Range(\"C4\", \"C4\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet2.Range(\"D4\", \"G4\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(255, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet2.Range(\"I4\", \"Q4\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(240, 247, 236);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet2.Range(\"R4\", \"S4\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet2.Range(\"T4\", \"AW4\");\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = forCopySheet2.Range(\"AX4\", \"AX4\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = defaultSheet.Range(\"B1\", \"H1\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(191, 191, 191);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Font.Bold = true;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"資料番号\");\n            \n            rangeTemp = defaultSheet.Range(\"I1\", \"O1\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(191, 191, 191);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Font.Bold = true;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"資料名\");\n            \n            rangeTemp = defaultSheet.Range(\"P1\", \"V1\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(191, 191, 191);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Font.Bold = true;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"システムコード\");\n            \n            rangeTemp = defaultSheet.Range(\"W1\", \"AC1\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(191, 191, 191);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Font.Bold = true;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"システム名\");\n            \n            rangeTemp = defaultSheet.Range(\"AD1\", \"AF1\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(191, 191, 191);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Font.Bold = true;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"版\");\n            \n            rangeTemp = defaultSheet.Range(\"AG1\", \"AO1\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(191, 191, 191);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Font.Bold = true;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"日付\");\n            \n            rangeTemp = defaultSheet.Range(\"AP1\", \"AX1\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(191, 191, 191);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Font.Bold = true;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"担当\");\n            \n            rangeTemp = defaultSheet.Range(\"B2\", \"H4\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            \n            rangeTemp = defaultSheet.Range(\"I2\", \"O4\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            \n            rangeTemp = defaultSheet.Range(\"P2\", \"V2\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            \n            rangeTemp = defaultSheet.Range(\"P3\", \"V3\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(191, 191, 191);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Font.Bold = true;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"サブシステムコード\");\n            \n            rangeTemp = defaultSheet.Range(\"P4\", \"V4\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            \n            rangeTemp = defaultSheet.Range(\"W2\", \"AC2\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            \n            rangeTemp = defaultSheet.Range(\"W3\", \"AC3\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(191, 191, 191);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Font.Bold = true;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"サブシステム名\");\n            \n            rangeTemp = defaultSheet.Range(\"W4\", \"AC4\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            \n            rangeTemp = defaultSheet.Range(\"AD2\", \"AF2\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"1.0\");\n            \n            rangeTemp = defaultSheet.Range(\"AD3\", \"AF3\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            \n            rangeTemp = defaultSheet.Range(\"AG2\", \"AI2\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(191, 191, 191);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.FirstCell().Style.Font.Bold = true;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"作成日\");\n            \n            rangeTemp = defaultSheet.Range(\"AG3\", \"AI3\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(191, 191, 191);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Font.Bold = true;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"更新日\");\n            \n            rangeTemp = defaultSheet.Range(\"AJ2\", \"AO2\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(DateTime.Now.Year + \"/\" + DateTime.Now.Month + \"/\" + DateTime.Now.Day);\n            \n            rangeTemp = defaultSheet.Range(\"AJ3\", \"AO3\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(DateTime.Now.Year + \"/\" + DateTime.Now.Month + \"/\" + DateTime.Now.Day);\n            \n            rangeTemp = defaultSheet.Range(\"AP2\", \"AR2\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(191, 191, 191);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.FirstCell().Style.Font.Bold = true;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"作成者\");\n            \n            rangeTemp = defaultSheet.Range(\"AP3\", \"AR3\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(191, 191, 191);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Font.Bold = true;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"更新者\");\n            \n            rangeTemp = defaultSheet.Range(\"AS2\", \"AX2\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"NEC\");\n            \n            rangeTemp = defaultSheet.Range(\"AS3\", \"AX3\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Dotted;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"NEC\");\n            \n            rangeTemp = defaultSheet.Range(\"AD4\", \"AX4\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"(C) NEC Corporation 2021\");\n            \n            rangeTemp = defaultSheet.Range(\"B5\", \"I5\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(204, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"処理名\");\n            \n            rangeTemp = defaultSheet.Range(\"J5\", \"AX5\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = defaultSheet.Range(\"B6\", \"AX6\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = defaultSheet.Range(\"B7\", \"G7\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(204, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"クラス名\");\n            \n            rangeTemp = defaultSheet.Range(\"B8\", \"B12\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(204, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            \n            rangeTemp = defaultSheet.Range(\"C8\", \"G8\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(204, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"クラス属性\");\n            \n            rangeTemp = defaultSheet.Range(\"C9\", \"G9\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(204, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"継承クラス\");\n            \n            rangeTemp = defaultSheet.Range(\"C10\", \"G10\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(204, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"インタフェース\");\n            \n            rangeTemp = defaultSheet.Range(\"C11\", \"G12\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(204, 255, 204);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"クラス概要\");\n            \n            rangeTemp = defaultSheet.Range(\"H7\", \"AX7\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            \n            rangeTemp = defaultSheet.Range(\"H8\", \"AX8\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(217, 217, 217);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"public\");\n            \n            rangeTemp = defaultSheet.Range(\"H9\", \"AX9\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(217, 217, 217);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            \n            rangeTemp = defaultSheet.Range(\"H10\", \"AX10\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Fill.BackgroundColor = XLColor.FromArgb(217, 217, 217);\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n            rangeTemp.FirstCell().SetValue(\"-\");\n            \n            rangeTemp = defaultSheet.Range(\"H11\", \"AX12\");\n            rangeTemp.Merge();\n            rangeTemp.Style.Border.LeftBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.RightBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.TopBorder = XLBorderStyleValues.Thin;\n            rangeTemp.Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n            rangeTemp.FirstCell().Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;\n        }\n    }\n    \n    public class Table\n    {\n        public string tableID;\n        public string tableName;\n        public bool hasPrimaryKey;\n        \n        public List<Column> columnList;\n        \n        public Table(string tableID, string tableName, List<Column> columnList)\n        {\n            this.tableID = tableID;\n            this.tableName = tableName;\n            this.columnList = columnList;\n            this.hasPrimaryKey = false;\n            foreach(Column column in columnList)\n            {\n                if (column.isPrimaryKey)\n                {\n                    this.hasPrimaryKey = true;\n                    break;\n                }\n            }\n        }\n    }\n    \n    public class Column\n    {\n        public string colID;\n        public string colName;\n        public string type;\n        public int digitsCheck;\n        public int decimalCheck;\n        public bool notNull;\n        public bool isPrimaryKey;\n        \n        public Column(string colID, string colName, string type, int digitsCheck, int decimalCheck, bool notNull = false, bool isPrimaryKey = false)\n        {\n            this.colID = colID;\n            this.colName = colName;\n            this.type = type;\n            this.digitsCheck = digitsCheck;\n            this.decimalCheck = decimalCheck;\n            this.notNull = notNull;\n            this.isPrimaryKey = isPrimaryKey;\n        }\n    }\n    \n    public class DesignBook\n    {\n        public string name;\n        public string sheetName;\n        public string serviceClassName;\n        public string classDiscription;\n        public List<SqlInfo> sqlInfoList;\n        \n        public DesignBook(Table table)\n        {\n            name = table.tableName + \"マスタ\";\n            sheetName = table.tableID;\n            serviceClassName = UnderScoreCaseToCamelCase(table.tableID, true) + \"ServiceImpl\";\n            classDiscription = name + \"用Mapperクラス\";\n            sqlInfoList = new List<SqlInfo>();\n        }\n        \n        public string UnderScoreCaseToCamelCase(string str, bool isUpperCamelCase = false)\n        {\n            str = str.ToLower().Trim();\n            while (str.Contains(\"_\"))\n            {\n                int index = str.IndexOf('_');\n                string upper = str[index + 1].ToString().ToUpper();\n                str = str.Remove(index, 2);\n                str = str.Insert(index, upper);\n            }\n            \n            if (isUpperCamelCase)\n            {\n                string upper = str[0].ToString().ToUpper();\n                str = str.Remove(0, 1);\n                str = str.Insert(0, upper);\n            }\n            \n            return str;\n        }\n    }\n    \n    public class SqlInfo\n    {\n        public string name;\n        public string discription;\n        public string returnType;\n        public string parameterType;\n        public string parameterName;\n        public string parameterDiscription;\n        \n        public List<SqlBlock> sqlBlockList;\n    }\n    \n    public class SqlBlock\n    {\n        public Dictionary<string, string> sqlBlockColumnInfo;\n        public List<List<string>> sqlBlockLines;\n    }\n    \n    public class Analyze\n    {\n        /// <summary>\n        /// 在所有分析前调用\n        /// </summary>\n        /// <param name=\"param\">传入的参数</param>\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\n        /// <param name=\"allFilePathList\">将会分析的所有文件路径列表</param>\n        /// <param name=\"globalizationSetter\">获取国际化字符串</param>\n        /// <param name=\"isExecuteInSequence\">是否顺序执行</param>\n        public void RunBeforeAnalyzeSheet(Param param, ref Object globalObject, List<string> allFilePathList, GlobalizationSetter globalizationSetter, bool isExecuteInSequence)\n        {\n            globalObject = new List<Table>();\n        }\n\n        /// <summary>\n        /// 分析一个sheet\n        /// </summary>\n        /// <param name=\"param\">传入的参数</param>\n        /// <param name=\"sheet\">被分析的sheet</param>\n        /// <param name=\"filePath\">文件路径</param>\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\n        /// <param name=\"globalizationSetter\">获取国际化字符串</param>\n        /// <param name=\"isExecuteInSequence\">是否顺序执行</param>\n        /// <param name=\"invokeCount\">此分析函数被调用的次数</param>\n        public void AnalyzeSheet(Param param, IXLWorksheet sheet, string filePath, ref Object globalObject, GlobalizationSetter globalizationSetter, bool isExecuteInSequence, int invokeCount)\n        {\n            Logger.Info(\"Analysing Sheet: \" + sheet.Name + \"...\");\n            \n            string tableIDPos = param.GetOne(\"TableIDPos\");\n            string tableNamePos = param.GetOne(\"TableNamePos\");\n            int currentRowNum = int.Parse(param.GetOne(\"StartRowNum\"));\n            string colIDCol = param.GetOne(\"ColIDCol\");\n            string colNameCol = param.GetOne(\"ColNameCol\");\n            string typeCol = param.GetOne(\"TypeCol\");\n            string digitsCheckCol = param.GetOne(\"DigitsCheckCol\");\n            string decimalCheckCol = param.GetOne(\"DecimalCheckCol\");\n            string nullCheckCol = param.GetOne(\"NullCheckCol\");\n            string isPrimaryKeyCol = param.GetOne(\"PrimaryKeyCol\");\n            string tableID = sheet.Cell(tableIDPos).CachedValue.ToString();\n            \n            string tableName = string.IsNullOrWhiteSpace(tableNamePos) ? \"\" :  sheet.Cell(tableNamePos).CachedValue.ToString();\n            \n            \n            List<Column> columnList = new List<Column>();\n            while (CellNotBlank(sheet.Cell(colIDCol + currentRowNum)))\n            {\n                string colID = sheet.Cell(colIDCol + currentRowNum).CachedValue.ToString();\n                string colName = string.IsNullOrWhiteSpace(colNameCol) ? \"\" :  sheet.Cell(colNameCol + currentRowNum).CachedValue.ToString();\n                string type = sheet.Cell(typeCol + currentRowNum).CachedValue.ToString();\n                int digitsCheck = string.IsNullOrWhiteSpace(digitsCheckCol) || string.IsNullOrWhiteSpace(sheet.Cell(digitsCheckCol + currentRowNum).CachedValue.ToString()) ? -1 :  int.Parse(sheet.Cell(digitsCheckCol + currentRowNum).CachedValue.ToString());\n                int decimalCheck = string.IsNullOrWhiteSpace(decimalCheckCol) || string.IsNullOrWhiteSpace(sheet.Cell(decimalCheckCol + currentRowNum).CachedValue.ToString()) ? -1 :  int.Parse(sheet.Cell(decimalCheckCol + currentRowNum).CachedValue.ToString());\n                bool notNull = CheckIfStringIsTrue(sheet.Cell(nullCheckCol + currentRowNum).CachedValue.ToString(), new List<string>(){\"not null\"});\n                bool isPrimaryKey = CellNotBlank(sheet.Cell(isPrimaryKeyCol + currentRowNum));\n                \n                columnList.Add(new Column(colID, colName, type, digitsCheck, decimalCheck, notNull, isPrimaryKey));\n                \n                ++currentRowNum;\n            }\n            Table table = new Table(tableID, tableName, columnList);\n            \n            ((List<Table>)globalObject).Add(table);\n        }\n\n        /// <summary>\n        /// 在所有输出前调用\n        /// </summary>\n        /// <param name=\"param\">传入的参数</param>\n        /// <param name=\"workbook\">用于输出的excel文件</param>\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\n        /// <param name=\"allFilePathList\">分析的所有文件路径列表</param>\n        /// <param name=\"globalizationSetter\">获取国际化字符串</param>\n        /// <param name=\"isExecuteInSequence\">是否顺序执行</param>\n        public void RunBeforeSetResult(Param param, XLWorkbook workbook, ref Object globalObject, List<string> allFilePathList, GlobalizationSetter globalizationSetter, bool isExecuteInSequence)\n        {\n            ForCopy.InitSheetForCopy();\n        }\n\n        /// <summary>\n        /// 根据分析结果输出到excel中\n        /// </summary>\n        /// <param name=\"param\">传入的参数</param>\n        /// <param name=\"workbook\">用于输出的excel文件</param>\n        /// <param name=\"filePath\">文件路径</param>\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\n        /// <param name=\"globalizationSetter\">获取国际化字符串</param>\n        /// <param name=\"isExecuteInSequence\">是否顺序执行</param>\n        /// <param name=\"invokeCount\">此输出函数被调用的次数</param>\n        /// <param name=\"totalCount\">总共需要调用的输出函数的次数</param>\n        public void SetResult(Param param, XLWorkbook workbook, string filePath, ref Object globalObject, GlobalizationSetter globalizationSetter, bool isExecuteInSequence, int invokeCount, int totalCount)\n        {\n            List<Table> tableList = (List<Table>)globalObject;\n            foreach (Table table in tableList)\n            {\n                DesignBook designBook = new DesignBook(table);\n                Logger.Info(\"Making entity: \" + table.tableID + \", \" + table.tableName + \"...\");\n                MakeEntityFile(table, param, Output.OutputPath);\n                Logger.Info(\"Making mapper: \" + table.tableID + \", \" + table.tableName + \"...\");\n                MakeMapperFile(table, param, Output.OutputPath, designBook);\n                Logger.Info(\"Making design book: \" + table.tableID + \", \" + table.tableName + \"...\");\n                ConvertMapperIntoExcel(param, workbook, designBook);\n            }\n        }\n\n        /// <summary>\n        /// 所有调用结束后调用\n        /// </summary>\n        /// <param name=\"param\">传入的参数</param>\n        /// <param name=\"workbook\">用于输出的excel文件</param>\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\n        /// <param name=\"allFilePathList\">分析的所有文件路径列表</param>\n        /// <param name=\"globalizationSetter\">获取国际化字符串</param>\n        /// <param name=\"isExecuteInSequence\">是否顺序执行</param>\n        public void RunEnd(Param param, XLWorkbook workbook, ref Object globalObject, List<string> allFilePathList, GlobalizationSetter globalizationSetter, bool isExecuteInSequence)\n        {\n            \n        }\n        \n        public bool CellNotBlank(IXLCell cell)\n        {\n            if (string.IsNullOrWhiteSpace(cell.CachedValue.ToString()))\n            {\n                return false;\n            }\n        \n            return true;\n        }\n        \n        public bool CheckIfStringIsTrue(string str, List<string> extra = null)\n        {\n            str = str.ToLower().Trim();\n            if (str == \"true\" || str == \"〇\" || str == \"○\" || str == \"1\")\n            {\n                return true;\n            }\n            if (extra != null)\n            {\n                foreach (string extraStr in extra)\n                {\n                    if (str == extraStr)\n                    {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        \n        public string UnderScoreCaseToCamelCase(string str, bool isUpperCamelCase = false)\n        {\n            str = str.ToLower().Trim();\n            while (str.Contains(\"_\"))\n            {\n                int index = str.IndexOf('_');\n                string upper = str[index + 1].ToString().ToUpper();\n                str = str.Remove(index, 2);\n                str = str.Insert(index, upper);\n            }\n            \n            if (isUpperCamelCase)\n            {\n                string upper = str[0].ToString().ToUpper();\n                str = str.Remove(0, 1);\n                str = str.Insert(0, upper);\n            }\n            \n            return str;\n        }\n        \n        long LongRandom(long min, long max, Random rand) \n        {\n            //Working with ulong so that modulo works correctly with values > long.MaxValue\n            ulong uRange = (ulong)(max - min);\n            \n            //Prevent a modolo bias; see https://stackoverflow.com/a/10984975/238419\n            //for more information.\n            //In the worst case, the expected number of calls is 2 (though usually it's\n            //much closer to 1) so this loop doesn't really hurt performance at all.\n            ulong ulongRand;\n            do\n            {\n                byte[] buf = new byte[8];\n                rand.NextBytes(buf);\n                ulongRand = (ulong)BitConverter.ToInt64(buf, 0);\n            } while (ulongRand > ulong.MaxValue - ((ulong.MaxValue % uRange) + 1) % uRange);\n            \n            return (long)(ulongRand % uRange) + min;\n        }\n        \n        public string MakeLevel(int level)\n        {\n            string res = \"\";\n            for (int i = 0; i < level; ++i)\n            {\n                res += \"    \";\n            }\n            return res;\n        }\n        \n        public Dictionary<string, string> GetConvertDic(Param param, Converter.DicType dicType)\n        {\n            Dictionary<string, string> convertDic;\n            string key;\n            if (dicType == Converter.DicType.DatabaseType)\n            {\n                key = \"DatabaseType\";\n            }\n            else\n            {\n                key = \"DesignBookType\";\n            }\n            if (param.GetOne(key) == \"Postgresql\")\n            {\n                convertDic = Converter.postgresqlDic;\n            }\n            else if (param.GetOne(key) == \"SqlServer\")\n            {\n                convertDic = Converter.sqlServerDic;\n            }\n            else if (param.GetOne(key) == \"MySQL\")\n            {\n                convertDic = Converter.mySqlDic;\n            }\n            else if (param.GetOne(key) == \"Oracle\")\n            {\n                convertDic = Converter.oracleDic;\n            }\n            else\n            {\n                convertDic = Converter.oracleDic;\n            }\n            \n            return convertDic;\n        }\n        \n        public string GetJavaType(Dictionary<string, string> convertDic, Column column)\n        {\n            string type = column.type.ToLower();\n            bool done = false;\n            foreach (string key in convertDic.Keys)\n            {\n                string keyType = key;\n                if (keyType.Contains(\"~\"))\n                {\n                    string left = keyType.Substring(0, keyType.IndexOf('(') - 1);\n                    string right = keyType.Substring(keyType.IndexOf('(')).Replace(\"(\", \"\").Replace(\")\", \"\");\n                    int from = int.Parse(right.Split('~')[0]);\n                    int to = int.Parse(right.Split('~')[1]);\n                    for (int i = from; i < to; ++i)\n                    {\n                        string keyTypeTemp = left + \"(\" + i + \")\";\n                        if (type == keyTypeTemp)\n                        {\n                            type = convertDic[keyTypeTemp];\n                            done = true;\n                            break;\n                        }\n                    }\n                }\n                else\n                {\n                    if (type == keyType)\n                    {\n                        type = convertDic[keyType];\n                        done = true;\n                        break;\n                    }\n                }\n            }\n            if (!done)\n            {\n                foreach (string key in convertDic.Keys)\n                {\n                    string keyType = key;\n                    if (type.StartsWith(keyType))\n                    {\n                        type = convertDic[keyType];\n                        break;\n                    }\n                }\n            }\n            \n            return type;\n        }\n        \n        public string GetNowTimestampStr(Param param)\n        {\n            return \"CURRENT_TIMESTAMP\";\n        }\n        \n        \n        /** MAKE ENTITY START **************************************************************************************************/\n        \n        public void MakeDocComment(List<string> strList, List<string> commentList, int level)\n        {\n            strList.Add(MakeLevel(level) + \"/**\");\n            foreach(string comment in commentList)\n            {\n                strList.Add(MakeLevel(level) + \" * \" + comment);\n            }\n            strList.Add(MakeLevel(level) + \" */\");\n        }\n        \n        public void MakeAnnotation(List<string> strList, Column column, int level, List<string> importList, Param param)\n        {\n            Dictionary<string, string> dic = GetConvertDic(param, Converter.DicType.DesignBookType);\n        \n            if (column.notNull)\n            {\n                if (GetJavaType(dic, column) == \"String\")\n                {\n                    if (!importList.Contains(\"import javax.validation.constraints.NotBlank;\"))\n                    {\n                        importList.Add(\"import javax.validation.constraints.NotBlank;\");\n                    }\n                    strList.Add(MakeLevel(level) + \"@NotBlank\");\n                }\n                else\n                {\n                    if (!importList.Contains(\"import javax.validation.constraints.NotEmpty;\"))\n                    {\n                        importList.Add(\"import javax.validation.constraints.NotEmpty;\");\n                    }\n                    strList.Add(MakeLevel(level) + \"@NotEmpty\");\n                }\n            }\n            if (column.digitsCheck >= 0)\n            {\n                if (!importList.Contains(\"import org.hibernate.validator.constraints.Length;\"))\n                {\n                    importList.Add(\"import org.hibernate.validator.constraints.Length;\");\n                }\n                strList.Add(MakeLevel(level) + \"@Length(min = 0, max = \" + column.digitsCheck + \")\");\n            }\n            if (column.decimalCheck >= 0)\n            {\n                if (!importList.Contains(\"import javax.validation.constraints.Digits;\"))\n                {\n                    importList.Add(\"import javax.validation.constraints.Digits;\");\n                }\n                strList.Add(MakeLevel(level) + \"@Digits(integer = \" + (column.digitsCheck - (column.decimalCheck == 0 ? 0 : 1) - column.decimalCheck) + \", fraction = \" + column.decimalCheck + \")\");\n            }\n        }\n        \n        public void MakeProperty(List<string> strList, Column column, int level, Param param, List<string> importList)\n        {\n            Dictionary<string, string> convertDic = GetConvertDic(param, Converter.DicType.DesignBookType);\n        \n            string type = GetJavaType(convertDic, column);\n            \n            CheckAndAddImportList(type, importList);\n            \n            strList.Add(MakeLevel(level) + \"private \" + type + \" \" + UnderScoreCaseToCamelCase(column.colID) + \";\");\n        }\n        \n        public void CheckAndAddImportList(string type, List<string> importList)\n        {\n            if (type == \"LocalDateTime\")\n            {\n                string str = \"import java.time.LocalDateTime;\";\n                if (!importList.Contains(str))\n                {\n                    importList.Add(str);\n                }\n            }\n            else if (type == \"OffsetDateTime\")\n            {\n                string str = \"import java.time.OffsetDateTime;\";\n                if (!importList.Contains(str))\n                {\n                    importList.Add(str);\n                }\n            }\n            else if (type == \"LocalDate\")\n            {\n                string str = \"import java.time.LocalDate;\";\n                if (!importList.Contains(str))\n                {\n                    importList.Add(str);\n                }\n            }\n            else if (type == \"LocalTime\")\n            {\n                string str = \"import java.time.LocalTime;\";\n                if (!importList.Contains(str))\n                {\n                    importList.Add(str);\n                }\n            }\n            else if (type == \"BigDecimal\")\n            {\n                string str = \"import java.math.BigDecimal;\";\n                if (!importList.Contains(str))\n                {\n                    importList.Add(str);\n                }\n            }\n            else if (type == \"Timestamp\")\n            {\n                string str = \"import java.sql.Timestamp;\";\n                if (!importList.Contains(str))\n                {\n                    importList.Add(str);\n                }\n            }\n            else if (type == \"Time\")\n            {\n                string str = \"import java.sql.Time;\";\n                if (!importList.Contains(str))\n                {\n                    importList.Add(str);\n                }\n            }\n            else if (type == \"Date\")\n            {\n                string str = \"import java.sql.Date;\";\n                if (!importList.Contains(str))\n                {\n                    importList.Add(str);\n                }\n            }\n        }\n        \n        public void MakeEntityFile(Table table, Param param, string path)\n        {\n            List<string> body = new List<string>();\n            List<string> importList = new List<string>() { \"\", \"import lombok.Data;\", \"import java.io.Serializable;\" };\n            MakeEntityPackage(body, param);\n            body.Add(\"@Data\");\n            MakeEntityClassBody(table, body, param, importList);\n            \n            importList.Add(\"\");\n            body.InsertRange (1, importList);\n            \n            string outputPath = System.IO.Path.Combine(path, UnderScoreCaseToCamelCase(table.tableID, true) + \"Entity.java\");\n            Logger.Info(\"Write into: \" + outputPath + \"...\");\n            System.IO.File.WriteAllLines(outputPath, body);\n            Logger.Info(\"OK\");\n        }\n        \n        public void MakeEntityPackage(List<string> body, Param param)\n        {\n            body.Add(\"package \" + param.GetOne(\"EntityPackage\") + \";\");\n        }\n        \n        public void MakeEntityClassBody(Table table, List<string> body, Param param, List<string> importList)\n        {\n            body.Add(\"public class \" + UnderScoreCaseToCamelCase(table.tableID, true) + \"Entity\" + \" implements Serializable {\");\n            body.Add(\"    private static final long serialVersionUID = \" + LongRandom(long.MinValue, long.MaxValue, new Random(Guid.NewGuid().GetHashCode())) + \"L;\");\n            \n            foreach (Column column in table.columnList)\n            {\n                body.Add(\"\");\n                MakeDocComment(body, new List<string>() {column.colName}, 1);\n                if (param.GetOne(\"EnableValidate\") == \"Yes\")\n                {\n                    MakeAnnotation(body, column, 1, importList, param);\n                }\n                MakeProperty(body, column, 1, param, importList);\n            }\n            \n            body.Add(\"}\");\n        }\n        \n        \n        \n        \n        \n        /** MAKE MAPPER START **************************************************************************************************/\n        \n        public string MakeTestHead(Param param, Dictionary<string, string> convertDic, Column column, int level, List<List<string>> sqlBlockLines)\n        {\n            if (sqlBlockLines != null)\n            {\n                sqlBlockLines.Add(new List<string>(){ \"パラメーター.entity.\" + column.colName, \"!=\", \"null\", \"and\", \"〇\", \"〇\", column.colName});\n            }\n            string head = MakeLevel(level) + \"<if test=\\\"entity.\" + UnderScoreCaseToCamelCase(column.colID) + \" != null\";\n            // 当向Oracle中传\"\"时Oracle会自动将其转换为null, 而Potgresql, SqlServer, MySql会保持为空字符串. \n            // 因此对于一个字段, Postgresql, MySql和SqlServer中允许传\"\"但Oracle不允许\n            List<string> option = param.Get(\"Option\");\n            if ((param.GetOne(\"DatabaseType\") == \"Oracle\" || option.Contains(\"EmptyToNull\")) && GetJavaType(convertDic, column) == \"String\")\n            {\n                string blockLineStr = column.colName;\n                head += \" and entity.\" + UnderScoreCaseToCamelCase(column.colID);\n                if (option.Contains(\"EnableTrim\") && option.Contains(\"EnableFullWidthTrim\"))\n                {\n                    head += \".replaceAll('^[　*| *]*','').replaceAll('[　*| *]*$','')\";\n                    blockLineStr += \".replaceAll('^[　*| *]*','').replaceAll('[　*| *]*$','')\";\n                }\n                else if (option.Contains(\"EnableTrim\"))\n                {\n                    head += \".trim()\";\n                    blockLineStr += \".trim()\";\n                }\n                else if (option.Contains(\"EnableFullWidthTrim\"))\n                {\n                    head += \".replaceAll('^[　*]*','').replaceAll('[　*]*$','')\";\n                    blockLineStr += \".replaceAll('^[　*]*','').replaceAll('[　*]*$','')\";\n                }\n                head += \" !=''\";\n                if (sqlBlockLines != null)\n                {\n                    sqlBlockLines.Add(new List<string>(){ blockLineStr, \"!=\", \"''\", \"\", \"〇\", \"〇\", column.colName});\n                }\n            }\n            head += \"\\\">\";\n            \n            return head;\n        }\n        \n        public string MakeLeftEqualRight(Dictionary<string, string> convertDic, Param param, Column column, int level, string str, Table table, List<List<string>> sqlBlockLines, bool isUpdate, bool addBack = false)\n        {\n            if (sqlBlockLines != null)\n            {\n                sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル.\" + column.colName, \"=\", ColumnApplyOption(convertDic, param, column, \"パラメーター.entity.\" + column.colName, isUpdate, true), \"AND\", \"〇\", \"\", column.colName});\n            }\n            string colStr = \"#{entity.\" + UnderScoreCaseToCamelCase(column.colID) + \"}\";\n            colStr = ColumnApplyOption(convertDic, param, column, colStr, isUpdate);\n            string res = MakeLevel(level) + (!addBack ? str : \"\") + column.colID.ToUpper() + \" = \" + colStr + (addBack ? str : \"\");\n            \n            return res;\n        }\n        \n        public string ColumnApplyOption(Dictionary<string, string> convertDic, Param param, Column column, string colStr, bool isUpdate, bool forDesignBook = false)\n        {\n            List<string> option = param.Get(\"Option\");\n            // EnableTrim EmptyToNull\n            string res = colStr;\n            if (GetJavaType(convertDic, column) == \"String\")\n            {\n                if (option.Contains(\"EnableTrim\") && option.Contains(\"EnableFullWidthTrim\"))\n                {\n                    if (!forDesignBook)\n                    {\n                        res = res = \"REGEXP_REPLACE(REGEXP_REPLACE(\" + res + \", '^[　*| *]*', ''), '[　*| *]*$', '')\";\n                    }\n                    else\n                    {\n                        res = res + \" ※トリムする（半角、全角）\";\n                    }\n                }\n                else if (option.Contains(\"EnableTrim\"))\n                {\n                    if (!forDesignBook)\n                    {\n                        res = \"TRIM(\" + res + \")\";\n                    }\n                    else\n                    {\n                        res = res + \" ※トリムする（半角）\";\n                    }\n                }\n                else if (option.Contains(\"EnableFullWidthTrim\"))\n                {\n                    if (!forDesignBook)\n                    {\n                        res = \"REGEXP_REPLACE(REGEXP_REPLACE(\" + res + \", '^[　*]*', ''), '[　*]*$', '')\";\n                    }\n                    else\n                    {\n                        res = res + \" ※トリムする（全角）\";\n                    }\n                }\n                if (isUpdate && option.Contains(\"EmptyToNull\"))\n                {\n                    if (!forDesignBook)\n                    {\n                        res = \"CASE WHEN \" + res + \" = '' THEN NULL ELSE \" + res + \" END\";\n                    }\n                    else\n                    {\n                        res = res + \" ※\" + res + \"はブラックの場合、NULLにする\";\n                    }\n                }\n            }\n            return res;\n        }\n        \n        public void MakeOrder(List<string> body, int startlevel, List<List<string>> sqlBlockLines)\n        {\n            sqlBlockLines.Add(new List<string>(){\"パラメーター: orderCol != null and パラメーター: orderCol != ''\", \"1\", \"パラメーター: orderCol\", \"パラメーター: order\", \"パラメーター: orderCol\"});\n            body.Add(MakeLevel(startlevel) + \"<if test=\\\"orderCol != null and orderCol !=''\\\">\");\n            body.Add(MakeLevel(startlevel + 1) + \"ORDER BY ${orderCol}\");\n            body.Add(MakeLevel(startlevel + 1) + \"<if test=\\\"order != null and order !=''\\\">\");\n            body.Add(MakeLevel(startlevel + 2) + \"${order}\");\n            body.Add(MakeLevel(startlevel + 1) + \"</if>\");\n            body.Add(MakeLevel(startlevel) + \"</if>\");\n        }\n        \n        public void MakeMapperFile(Table table, Param param, string path, DesignBook designBook)\n        {\n            Dictionary<string, string> convertDic = GetConvertDic(param, Converter.DicType.DatabaseType);\n            SqlInfo sqlInfo;\n        \n            List<string> body = new List<string>();\n            MakeXmlHeader(body, param);\n            body.Add(\"\");\n            body.Add(MakeLevel(1) + \"<!-- \" + table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"エンティティ -->\");\n            MakeResultMap(body, param, table);\n            if (!string.IsNullOrWhiteSpace(param.GetOne(\"UpdateTimeId\")))\n            {\n                body.Add(\"\");\n                sqlInfo = new SqlInfo();\n                sqlInfo.discription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \" \") + \"排他チェック処理\";\n                sqlInfo.parameterType = UnderScoreCaseToCamelCase(table.tableID, true) + \"Entity\";\n                sqlInfo.parameterDiscription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"エンティティ \";\n                sqlInfo.parameterName = \"entity\";\n                body.Add(MakeLevel(1) + \"<!-- \" + sqlInfo.discription + \" -->\");\n                MakeExclusiveCheck(body, param, table, convertDic, sqlInfo);\n                designBook.sqlInfoList.Add(sqlInfo);\n            }\n            body.Add(\"\");\n            sqlInfo = new SqlInfo();\n            sqlInfo.discription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \" \") + \"件数の検索 *entityパラメータは入力しなくてもよい\";\n            sqlInfo.parameterType = UnderScoreCaseToCamelCase(table.tableID) + \"Entity\";\n            sqlInfo.parameterDiscription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"エンティティ \";\n            sqlInfo.parameterName = \"entity\";\n            body.Add(MakeLevel(1) + \"<!-- \" + sqlInfo.discription + \" -->\");\n            MakeSelectCount(body, param, table, convertDic, sqlInfo);\n            designBook.sqlInfoList.Add(sqlInfo);\n            body.Add(\"\");\n            sqlInfo = new SqlInfo();\n            sqlInfo.discription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \" \") + \"全検索\";\n            sqlInfo.parameterType = \"java.lang.String\";\n            sqlInfo.parameterDiscription = \"ソート情報\";\n            sqlInfo.parameterName = \"order、orderCol\";\n            body.Add(MakeLevel(1) + \"<!-- \" + sqlInfo.discription + \" -->\");\n            MakeSelectAll(body, param, table, sqlInfo);\n            designBook.sqlInfoList.Add(sqlInfo);\n            if (table.hasPrimaryKey)\n            {\n                body.Add(\"\");\n                sqlInfo = new SqlInfo();\n                sqlInfo.discription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \" \") + \"主キーで検索\";\n                sqlInfo.parameterType = UnderScoreCaseToCamelCase(table.tableID) + \"Entity\";\n                sqlInfo.parameterDiscription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"エンティティ \";\n                sqlInfo.parameterName = \"entity\";\n                body.Add(MakeLevel(1) + \"<!-- \" + sqlInfo.discription + \" -->\");\n                MakeSelectByKey(body, param, table, convertDic, sqlInfo);\n                designBook.sqlInfoList.Add(sqlInfo);\n            }\n            body.Add(\"\");\n            sqlInfo = new SqlInfo();\n            sqlInfo.discription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"条件検索\";\n            sqlInfo.parameterType = UnderScoreCaseToCamelCase(table.tableID) + \"Entity\";\n            sqlInfo.parameterDiscription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"エンティティ \";\n            sqlInfo.parameterName = \"entity\";\n            body.Add(MakeLevel(1) + \"<!-- \" + sqlInfo.discription + \" -->\");\n            MakeSelect(body, param, table, convertDic, sqlInfo);\n            designBook.sqlInfoList.Add(sqlInfo);\n            body.Add(\"\");\n            sqlInfo = new SqlInfo();\n            sqlInfo.discription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"条件検索 ソートあり\";\n            sqlInfo.parameterType = UnderScoreCaseToCamelCase(table.tableID) + \"Entity\";\n            sqlInfo.parameterDiscription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"エンティティ \";\n            sqlInfo.parameterName = \"entity\";\n            body.Add(MakeLevel(1) + \"<!-- \" + sqlInfo.discription + \" -->\");\n            MakeSelectWithOrder(body, param, table, convertDic, sqlInfo);\n            designBook.sqlInfoList.Add(sqlInfo);\n            body.Add(\"\");\n            sqlInfo = new SqlInfo();\n            sqlInfo.discription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"作成\";\n            sqlInfo.parameterType = UnderScoreCaseToCamelCase(table.tableID) + \"Entity\";\n            sqlInfo.parameterDiscription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"エンティティ \";\n            sqlInfo.parameterName = \"entity\";\n            body.Add(MakeLevel(1) + \"<!-- \" + sqlInfo.discription + \" -->\");\n            MakeInsert(body, param, table, convertDic, sqlInfo);\n            designBook.sqlInfoList.Add(sqlInfo);\n            if (table.hasPrimaryKey)\n            {\n                body.Add(\"\");\n                sqlInfo = new SqlInfo();\n                sqlInfo.discription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"削除\";\n                sqlInfo.parameterType = UnderScoreCaseToCamelCase(table.tableID) + \"Entity\";\n                sqlInfo.parameterDiscription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"エンティティ \";\n                sqlInfo.parameterName = \"entity\";\n                body.Add(MakeLevel(1) + \"<!-- \" + sqlInfo.discription + \" -->\");\n                MakeDeleteByKey(body, param, table, convertDic, sqlInfo);\n                designBook.sqlInfoList.Add(sqlInfo);\n            }\n            if (table.hasPrimaryKey)\n            {\n                body.Add(\"\");\n                sqlInfo = new SqlInfo();\n                sqlInfo.discription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"更新\";\n                sqlInfo.parameterType = UnderScoreCaseToCamelCase(table.tableID) + \"Entity\";\n                sqlInfo.parameterDiscription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"エンティティ \";\n                sqlInfo.parameterName = \"entity\";\n                body.Add(MakeLevel(1) + \"<!-- \" + sqlInfo.discription + \" -->\");\n                MakeUpdateByKey(body, param, table, convertDic, sqlInfo);\n                designBook.sqlInfoList.Add(sqlInfo);\n            }\n            body.Add(\"\");\n            sqlInfo = new SqlInfo();\n            sqlInfo.discription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"ページング検索\";\n            sqlInfo.parameterType = \"Object\";\n            sqlInfo.parameterDiscription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"エンティティ、ソート情報\";\n            sqlInfo.parameterName = \"entity、orderCol、order\";\n            body.Add(MakeLevel(1) + \"<!-- \" + sqlInfo.discription + \" -->\");\n            MakeSelectPage(body, param, table, convertDic, sqlInfo);\n            designBook.sqlInfoList.Add(sqlInfo);\n            body.Add(\"\");\n            sqlInfo = new SqlInfo();\n            sqlInfo.discription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \" \") + \"複数のレコードを追加\";\n            sqlInfo.parameterType = UnderScoreCaseToCamelCase(table.tableID) + \"Entity\";\n            sqlInfo.parameterDiscription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"エンティティ \";\n            sqlInfo.parameterName = \"entity\";\n            body.Add(MakeLevel(1) + \"<!-- \" + sqlInfo.discription + \" -->\");\n            MakeInsertMultipleByKey(body, param, table, convertDic, sqlInfo);\n            designBook.sqlInfoList.Add(sqlInfo);\n            body.Add(\"\");\n            sqlInfo = new SqlInfo();\n            sqlInfo.discription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \" \") + \"複数のレコードを削除\";\n            sqlInfo.parameterType = UnderScoreCaseToCamelCase(table.tableID) + \"Entity\";\n            sqlInfo.parameterDiscription = table.tableName + (string.IsNullOrWhiteSpace(table.tableName) ? \"\" : \"の\") + \"エンティティ \";\n            sqlInfo.parameterName = \"entity\";\n            body.Add(MakeLevel(1) + \"<!-- \" + sqlInfo.discription + \" -->\");\n            MakeDeleteMultipleByKey(body, param, table, convertDic, sqlInfo);\n            designBook.sqlInfoList.Add(sqlInfo);\n            body.Add(\"</mapper>\");\n            \n            string outputPath = System.IO.Path.Combine(path, UnderScoreCaseToCamelCase(table.tableID, true) + \"Mapper.xml\");\n            Logger.Info(\"Write into: \" + outputPath + \"...\");\n            System.IO.File.WriteAllLines(outputPath, body);\n            Logger.Info(\"OK\");\n        }\n        \n        public void MakeXmlHeader (List<string> body, Param param)\n        {\n            body.Add(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\");\n            body.Add(\"<!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\" >\");\n            body.Add(\"<mapper namespace=\\\"\" + param.GetOne(\"MapperPackage\") + \"\\\">\");\n        }\n        \n        public void MakeResultMap(List<string> body, Param param, Table table)\n        {\n            body.Add(MakeLevel(1) + \"<resultMap id=\\\"ResultMap\\\" type=\\\"\" + param.GetOne(\"EntityPackage\") + \".\" + UnderScoreCaseToCamelCase(table.tableID, true) + \"Entity\\\">\");\n            foreach (Column column in table.columnList)\n            {\n                body.Add(MakeLevel(2) + \"<result column=\\\"\" + column.colID.ToUpper() + \"\\\" property=\\\"\" + UnderScoreCaseToCamelCase(column.colID) + \"\\\" />\");\n            }\n            body.Add(MakeLevel(1) + \"</resultMap>\");\n        }\n        \n        public void MakeExclusiveCheck(List<string> body, Param param, Table table, Dictionary<string, string> convertDic, SqlInfo sqlInfo)\n        {\n            sqlInfo.name = \"exclusiveCheck\";\n            sqlInfo.returnType = \"java.lang.Integer\";\n            sqlInfo.sqlBlockList = new List<SqlBlock>();\n            body.Add(MakeLevel(1) + \"<select id=\\\"\" + sqlInfo.name + \"\\\" resultType=\\\"\" + sqlInfo.returnType + \"\\\">\");\n            SqlBlock sqlBlock;\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"取得対象\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"SELECT\");\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ \"COUNT(1)\" });\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(2) + \"COUNT(1)\");\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"from\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"FROM\");\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル\" });\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(2) + table.tableID.ToUpper());\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"絞込条件項目\", \"T\"}, {\"比較条件\", \"AB\"}, {\"結合条件項目(テーブル識別名.結合カラム)\", \"AD\"}, {\"組合条件\", \"AL\"}, {\"必須\", \"AN\"}, {\"先決条件\", \"AP\"}, {\"対象DBカラム\", \"AR\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"WHERE\");\n            if (table.hasPrimaryKey)\n            {\n                body.Add(MakeLevel(2) + \"1 = 1\");\n                Column updateCol = null;\n                foreach (Column column in table.columnList)\n                {\n                    if (column.colID.ToUpper() == param.GetOne(\"UpdateTimeId\").ToUpper())\n                    {\n                        updateCol = column;\n                    }\n                    if (column.isPrimaryKey)\n                    {\n                        body.Add(MakeTestHead(param, convertDic, column, 2, sqlBlock.sqlBlockLines));\n                        body.Add(MakeLeftEqualRight(convertDic, param, column, 3, \"AND \", table, sqlBlock.sqlBlockLines, false));\n                        body.Add(MakeLevel(2) + \"</if>\");\n                    }\n                }\n                \n                if (updateCol != null)\n                {\n                    body.Add(MakeTestHead(param, convertDic, updateCol, 2, sqlBlock.sqlBlockLines));\n                    body.Add(MakeLeftEqualRight(convertDic, param, updateCol, 3, \"AND \", table, sqlBlock.sqlBlockLines, false));\n                    body.Add(MakeLevel(2) + \"</if>\");\n                }\n                else\n                {\n                    sqlBlock.sqlBlockLines.Add(new List<string>(){ \"TODO Can't find update time column: \" + param.GetOne(\"UpdateTimeId\").ToUpper(), \"\", \"\", \"\", \"\", \"\"});\n                    body.Add(MakeLevel(2) + \"<!-- TODO Can't find update time column: \" + param.GetOne(\"UpdateTimeId\").ToUpper() + \" -->\");\n                    Logger.Warn(\"Can't find update time column: \" + param.GetOne(\"UpdateTimeId\").ToUpper());\n                    Logger.Warn(\"Search <!-- TODO Can't find update time column: \" + param.GetOne(\"UpdateTimeId\").ToUpper() + \" --> to fix it\");\n                }\n            }\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            \n            body.Add(MakeLevel(1) + \"</select>\");\n        }\n        \n        public void MakeSelectCount(List<string> body, Param param, Table table, Dictionary<string, string> convertDic, SqlInfo sqlInfo)\n        {\n            sqlInfo.name = \"select\" + UnderScoreCaseToCamelCase(table.tableID, true) + \"Count\";\n            sqlInfo.returnType = \"java.lang.Integer\";\n            sqlInfo.sqlBlockList = new List<SqlBlock>();\n            SqlBlock sqlBlock;\n            body.Add(MakeLevel(1) + \"<select id=\\\"\" + sqlInfo.name + \"\\\" parameterType=\\\"\" + param.GetOne(\"EntityPackage\") + \".\" + UnderScoreCaseToCamelCase(table.tableID, true) + \"Entity\\\" resultType=\\\"\" + sqlInfo.returnType + \"\\\">\");\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"取得対象\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"SELECT\");\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ \"COUNT(*)\" });\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(2) + \"COUNT(*)\");\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"from\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"FROM \");\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル\" });\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(2) + table.tableID.ToUpper());\n            body.Add(MakeLevel(2) + \"<if test=\\\"entity != null\\\">\");\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"絞込条件項目\", \"T\"}, {\"比較条件\", \"AB\"}, {\"結合条件項目(テーブル識別名.結合カラム)\", \"AD\"}, {\"組合条件\", \"AL\"}, {\"必須\", \"AN\"}, {\"先決条件\", \"AP\"}, {\"対象DBカラム\", \"AR\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(3) + \"WHERE\");\n            body.Add(MakeLevel(3) + \"1 = 1\");\n            foreach (Column column in table.columnList)\n            {\n                body.Add(MakeTestHead(param, convertDic, column, 3, sqlBlock.sqlBlockLines));\n                body.Add(MakeLeftEqualRight(convertDic, param, column, 4, \"AND \", table, sqlBlock.sqlBlockLines, false));\n                body.Add(MakeLevel(3) + \"</if>\");\n            }\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(2) + \"</if>\");\n            body.Add(MakeLevel(1) + \"</select>\");\n        }\n        \n        public void MakeSelectAll(List<string> body, Param param, Table table, SqlInfo sqlInfo)\n        {\n            sqlInfo.name = \"selectAll\" + UnderScoreCaseToCamelCase(table.tableID, true);\n            sqlInfo.returnType = \"ResultMap\";\n            sqlInfo.sqlBlockList = new List<SqlBlock>();\n            SqlBlock sqlBlock;\n            body.Add(MakeLevel(1) + \"<select id=\\\"\" + sqlInfo.name + \"\\\" resultMap=\\\"\" + sqlInfo.returnType + \"\\\">\");\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"取得対象\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"SELECT\");\n            foreach (Column column in table.columnList)\n            {\n                sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル.\" + column.colName });\n                body.Add(MakeLevel(2) + column.colID.ToUpper() + \",\");\n            }\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body[body.Count - 1] = body[body.Count - 1].Remove(body[body.Count - 1].Length - 1);\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"from\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"FROM \");\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル\" });\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(2) + table.tableID.ToUpper());\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"ソート使用ケース\", \"T\"}, {\"優先度\", \"AB\"}, {\"ソート項目\", \"AD\"}, {\"方向\", \"AN\"}, {\"対象DBカラム\", \"AP\"}};\n            List<List<string>> sqlBlockLines = new List<List<string>>();\n            MakeOrder(body, 2, sqlBlockLines);\n            sqlBlock.sqlBlockLines = sqlBlockLines;\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(1) + \"</select>\");\n        }\n        \n        public void MakeSelectByKey(List<string> body, Param param, Table table, Dictionary<string, string> convertDic, SqlInfo sqlInfo)\n        {\n            sqlInfo.name = \"select\" + UnderScoreCaseToCamelCase(table.tableID, true) + \"ByKey\";\n            sqlInfo.returnType = \"ResultMap\";\n            sqlInfo.parameterType = param.GetOne(\"EntityPackage\") + \".\" + UnderScoreCaseToCamelCase(table.tableID, true) + \"Entity\";\n            sqlInfo.sqlBlockList = new List<SqlBlock>();\n            SqlBlock sqlBlock;\n            body.Add(MakeLevel(1) + \"<select id=\\\"\" + sqlInfo.name + \"\\\" parameterType=\\\"\" + sqlInfo.parameterType + \"\\\" resultMap=\\\"\" + sqlInfo.returnType + \"\\\">\");\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"取得対象\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"SELECT\");\n            foreach (Column column in table.columnList)\n            {\n                sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル.\" + column.colName });\n                body.Add(MakeLevel(2) + column.colID.ToUpper() + \",\");\n            }\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body[body.Count - 1] = body[body.Count - 1].Remove(body[body.Count - 1].Length - 1);\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"from\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"FROM \");\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル\" });\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(2) + table.tableID.ToUpper());\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"絞込条件項目\", \"T\"}, {\"比較条件\", \"AB\"}, {\"結合条件項目(テーブル識別名.結合カラム)\", \"AD\"}, {\"組合条件\", \"AL\"}, {\"必須\", \"AN\"}, {\"先決条件\", \"AP\"}, {\"対象DBカラム\", \"AR\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"WHERE\");\n            body.Add(MakeLevel(2) + \"1 = 1\");\n            foreach (Column column in table.columnList)\n            {\n                if (column.isPrimaryKey)\n                {\n                    body.Add(MakeTestHead(param, convertDic, column, 2, sqlBlock.sqlBlockLines));\n                    body.Add(MakeLeftEqualRight(convertDic, param, column, 3, \"AND \", table, sqlBlock.sqlBlockLines, false));\n                    body.Add(MakeLevel(2) + \"</if>\");\n                }\n            }\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(1) + \"</select>\");\n        }\n        \n        public void MakeSelect(List<string> body, Param param, Table table, Dictionary<string, string> convertDic, SqlInfo sqlInfo)\n        {\n            sqlInfo.name = \"select\" + UnderScoreCaseToCamelCase(table.tableID, true);\n            sqlInfo.returnType = \"ResultMap\";\n            sqlInfo.parameterType = param.GetOne(\"EntityPackage\") + \".\" + UnderScoreCaseToCamelCase(table.tableID, true) + \"Entity\";\n            sqlInfo.sqlBlockList = new List<SqlBlock>();\n            SqlBlock sqlBlock;\n            body.Add(MakeLevel(1) + \"<select id=\\\"\"+ sqlInfo.name + \"\\\" parameterType=\\\"\" + sqlInfo.parameterType + \"\\\" resultMap=\\\"\" + sqlInfo.returnType + \"\\\">\");\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"取得対象\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"SELECT\");\n            foreach (Column column in table.columnList)\n            {\n                sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル.\" + column.colName });\n                body.Add(MakeLevel(2) + column.colID.ToUpper() + \",\");\n            }\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body[body.Count - 1] = body[body.Count - 1].Remove(body[body.Count - 1].Length - 1);\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"from\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"FROM \");\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル\" });\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(2) + table.tableID.ToUpper());\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"絞込条件項目\", \"T\"}, {\"比較条件\", \"AB\"}, {\"結合条件項目(テーブル識別名.結合カラム)\", \"AD\"}, {\"組合条件\", \"AL\"}, {\"必須\", \"AN\"}, {\"先決条件\", \"AP\"}, {\"対象DBカラム\", \"AR\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"WHERE\");\n            body.Add(MakeLevel(2) + \"1 = 1\");\n            foreach (Column column in table.columnList)\n            {\n                body.Add(MakeTestHead(param, convertDic, column, 2, sqlBlock.sqlBlockLines));\n                body.Add(MakeLeftEqualRight(convertDic, param, column, 3, \"AND \", table, sqlBlock.sqlBlockLines, false));\n                body.Add(MakeLevel(2) + \"</if>\");\n            }\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(1) + \"</select>\");\n        }\n        \n        public void MakeSelectWithOrder(List<string> body, Param param, Table table, Dictionary<string, string> convertDic, SqlInfo sqlInfo)\n        {\n            sqlInfo.name = \"select\" + UnderScoreCaseToCamelCase(table.tableID, true) + \"WithOrder\";\n            sqlInfo.returnType = \"ResultMap\";\n            sqlInfo.sqlBlockList = new List<SqlBlock>();\n            SqlBlock sqlBlock;\n            body.Add(MakeLevel(1) + \"<select id=\\\"\" + sqlInfo.name + \"\\\" resultMap=\\\"\" + sqlInfo.returnType +\"\\\">\");\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"取得対象\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"SELECT\");\n            foreach (Column column in table.columnList)\n            {\n                sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル.\" + column.colName });\n                body.Add(MakeLevel(2) + column.colID.ToUpper() + \",\");\n            }\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body[body.Count - 1] = body[body.Count - 1].Remove(body[body.Count - 1].Length - 1);\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"from\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"FROM \");\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル\" });\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(2) + table.tableID.ToUpper());\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"絞込条件項目\", \"T\"}, {\"比較条件\", \"AB\"}, {\"結合条件項目(テーブル識別名.結合カラム)\", \"AD\"}, {\"組合条件\", \"AL\"}, {\"必須\", \"AN\"}, {\"先決条件\", \"AP\"}, {\"対象DBカラム\", \"AR\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"WHERE\");\n            body.Add(MakeLevel(2) + \"1 = 1\");\n            foreach (Column column in table.columnList)\n            {\n                body.Add(MakeTestHead(param, convertDic, column, 2, sqlBlock.sqlBlockLines));\n                body.Add(MakeLeftEqualRight(convertDic, param, column, 3, \"AND \", table, sqlBlock.sqlBlockLines, false));\n                body.Add(MakeLevel(2) + \"</if>\");\n            }\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"ソート使用ケース\", \"T\"}, {\"優先度\", \"AB\"}, {\"ソート項目\", \"AD\"}, {\"方向\", \"AN\"}, {\"対象DBカラム\", \"AP\"}};\n            List<List<string>> sqlBlockLines = new List<List<string>>();\n            MakeOrder(body, 2, sqlBlockLines);\n            sqlBlock.sqlBlockLines = sqlBlockLines;\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(1) + \"</select>\");\n        }\n        \n        public void MakeInsert(List<string> body, Param param, Table table, Dictionary<string, string> convertDic, SqlInfo sqlInfo)\n        {\n            sqlInfo.name = \"insert\" + UnderScoreCaseToCamelCase(table.tableID, true);\n            sqlInfo.returnType = \"\";\n            sqlInfo.parameterType = param.GetOne(\"EntityPackage\") + \".\" + UnderScoreCaseToCamelCase(table.tableID, true) + \"Entity\";\n            sqlInfo.sqlBlockList = new List<SqlBlock>();\n            SqlBlock sqlBlock;\n            \n            body.Add(MakeLevel(1) + \"<insert id=\\\"\" + sqlInfo.name + \"\\\" parameterType=\\\"\" + sqlInfo.parameterType + \"\\\">\");\n            \n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"作成対象\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"INSERT INTO\");\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル\" });\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"作成項目\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + table.tableID.ToUpper() + \" (\");\n            foreach (Column column in table.columnList)\n            {\n                sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル.\" + column.colName });\n                body.Add(MakeLevel(3) + column.colID.ToUpper() + \",\");\n            }\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"項目値\", \"T\"}, {\"項目タイプ\", \"AB\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body[body.Count - 1] = body[body.Count - 1].Remove(body[body.Count - 1].Length - 1);\n            body.Add(MakeLevel(2) + \") VALUES (\");\n            foreach (Column column in table.columnList)\n            {\n                if (column.colID.ToUpper() == param.GetOne(\"UpdateTimeId\").ToUpper() || column.colID.ToUpper() == param.GetOne(\"CreateTimeId\").ToUpper())\n                {\n                    body.Add(MakeLevel(3) + GetNowTimestampStr(param) + \",\");\n                }\n                else\n                {\n                    string colStr = \"#{entity.\" + UnderScoreCaseToCamelCase(column.colID) + \"}\";\n                    colStr = ColumnApplyOption(convertDic, param, column, colStr, true);\n                    body.Add(MakeLevel(3) + colStr + \",\");\n                }\n            }\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ \"entity.作成項目\", \"一般項目\" });\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ GetNowTimestampStr(param), \"作成日時、修正日時\" });\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body[body.Count - 1] = body[body.Count - 1].Remove(body[body.Count - 1].Length - 1);\n            body.Add(MakeLevel(2) + \")\");\n            body.Add(MakeLevel(1) + \"</insert>\");\n        }\n        \n        public void MakeDeleteByKey(List<string> body, Param param, Table table, Dictionary<string, string> convertDic, SqlInfo sqlInfo)\n        {\n            sqlInfo.name = \"delete\" + UnderScoreCaseToCamelCase(table.tableID, true) + \"ByKey\";\n            sqlInfo.returnType = \"\";\n            sqlInfo.parameterType = param.GetOne(\"EntityPackage\") + \".\" + UnderScoreCaseToCamelCase(table.tableID, true) + \"Entity\";\n            sqlInfo.sqlBlockList = new List<SqlBlock>();\n            SqlBlock sqlBlock;\n            \n            body.Add(MakeLevel(1) + \"<delete id=\\\"\" + sqlInfo.name + \"\\\" parameterType=\\\"\" + sqlInfo.parameterType + \"\\\">\");\n\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"削除対象\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"DELETE FROM\");\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル\" });\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(2) + table.tableID.ToUpper());\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"絞込条件項目\", \"T\"}, {\"比較条件\", \"AB\"}, {\"結合条件項目(テーブル識別名.結合カラム)\", \"AD\"}, {\"組合条件\", \"AL\"}, {\"必須\", \"AN\"}, {\"先決条件\", \"AP\"}, {\"対象DBカラム\", \"AR\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"WHERE\");\n            body.Add(MakeLevel(2) + \"1 = 1\");\n            foreach (Column column in table.columnList)\n            {\n                if (column.isPrimaryKey)\n                {\n                    body.Add(MakeTestHead(param, convertDic, column, 2, sqlBlock.sqlBlockLines));\n                    body.Add(MakeLeftEqualRight(convertDic, param, column, 3, \"AND \", table, sqlBlock.sqlBlockLines, false));\n                    body.Add(MakeLevel(2) + \"</if>\");\n                }\n            }\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(1) + \"</delete>\");\n        }\n        \n        public void MakeUpdateByKey(List<string> body, Param param, Table table, Dictionary<string, string> convertDic, SqlInfo sqlInfo)\n        {\n            sqlInfo.name = \"update\" + UnderScoreCaseToCamelCase(table.tableID, true) + \"ByKey\";\n            sqlInfo.returnType = \"\";\n            sqlInfo.parameterType = param.GetOne(\"EntityPackage\") + \".\" + UnderScoreCaseToCamelCase(table.tableID, true) + \"Entity\";\n            sqlInfo.sqlBlockList = new List<SqlBlock>();\n            SqlBlock sqlBlock;\n            \n            body.Add(MakeLevel(1) + \"<update id=\\\"\" + sqlInfo.name + \"\\\" parameterType=\\\"\" + sqlInfo.parameterType + \"\\\">\");\n\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"更新対象\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル\" });\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(2) + \"UPDATE \" + table.tableID.ToUpper());\n            body.Add(MakeLevel(2) + \"<set>\");\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"項目値\", \"T\"}, {\"項目タイプ\", \"AB\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            foreach (Column column in table.columnList)\n            {\n                if (!column.isPrimaryKey)\n                {\n                    body.Add(MakeTestHead(param, convertDic, column, 3, null));\n                    if (column.colID.ToUpper() == param.GetOne(\"UpdateTimeId\").ToUpper())\n                    {\n                        body.Add(MakeLevel(4) + column.colID.ToUpper() + \" = \" + GetNowTimestampStr(param) + \", \");\n                    }\n                    else\n                    {\n                        body.Add(MakeLeftEqualRight(convertDic, param, column, 4, \",\", table, null, true, true));\n                    }\n                    body.Add(MakeLevel(3) + \"</if>\");\n                }\n            }\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ \"entity.作成項目\", \"一般項目\" });\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ GetNowTimestampStr(param), \"修正日時\" });\n            body.Add(MakeLevel(2) + \"</set>\");\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"絞込条件項目\", \"T\"}, {\"比較条件\", \"AB\"}, {\"結合条件項目(テーブル識別名.結合カラム)\", \"AD\"}, {\"組合条件\", \"AL\"}, {\"必須\", \"AN\"}, {\"先決条件\", \"AP\"}, {\"対象DBカラム\", \"AR\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"WHERE\");\n            body.Add(MakeLevel(2) + \"1 = 1\");\n            foreach (Column column in table.columnList)\n            {\n                if (column.isPrimaryKey)\n                {\n                    body.Add(MakeTestHead(param, convertDic, column, 2, sqlBlock.sqlBlockLines));\n                    body.Add(MakeLeftEqualRight(convertDic, param, column, 3, \"AND \", table, sqlBlock.sqlBlockLines, false));\n                    body.Add(MakeLevel(2) + \"</if>\");\n                }\n            }\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            \n            body.Add(MakeLevel(1) + \"</update>\");\n        }\n        \n        public void MakeSelectPage(List<string> body, Param param, Table table, Dictionary<string, string> convertDic, SqlInfo sqlInfo)\n        {\n            sqlInfo.name = \"update\" + UnderScoreCaseToCamelCase(table.tableID, true) + \"ByKey\";\n            sqlInfo.returnType = \"\";\n            sqlInfo.parameterType = param.GetOne(\"EntityPackage\") + \".\" + UnderScoreCaseToCamelCase(table.tableID, true) + \"Entity\";\n            sqlInfo.sqlBlockList = new List<SqlBlock>();\n            SqlBlock sqlBlock;\n            \n            body.Add(MakeLevel(1) + \"<select id=\\\"select\" + UnderScoreCaseToCamelCase(table.tableID, true) + \"Page\\\" resultMap=\\\"ResultMap\\\">\");\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"取得対象\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"SELECT\");\n            foreach (Column column in table.columnList)\n            {\n                sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル.\" + column.colName });\n                body.Add(MakeLevel(2) + column.colID.ToUpper() + \",\");\n            }\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body[body.Count - 1] = body[body.Count - 1].Remove(body[body.Count - 1].Length - 1);\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"from\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"FROM \");\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル\" });\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(2) + table.tableID.ToUpper());\n            body.Add(MakeLevel(2) + \"<if test=\\\"entity != null\\\">\");\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"絞込条件項目\", \"T\"}, {\"比較条件\", \"AB\"}, {\"結合条件項目(テーブル識別名.結合カラム)\", \"AD\"}, {\"組合条件\", \"AL\"}, {\"必須\", \"AN\"}, {\"先決条件\", \"AP\"}, {\"対象DBカラム\", \"AR\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(3) + \"WHERE\");\n            body.Add(MakeLevel(3) + \"1 = 1\");\n            foreach (Column column in table.columnList)\n            {\n                body.Add(MakeTestHead(param, convertDic, column, 3, sqlBlock.sqlBlockLines));\n                body.Add(MakeLeftEqualRight(convertDic, param, column, 4, \"AND \", table, sqlBlock.sqlBlockLines, false));\n                body.Add(MakeLevel(3) + \"</if>\");\n            }\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(2) + \"</if>\");\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"ソート使用ケース\", \"T\"}, {\"優先度\", \"AB\"}, {\"ソート項目\", \"AD\"}, {\"方向\", \"AN\"}, {\"対象DBカラム\", \"AP\"}};\n            List<List<string>> sqlBlockLines = new List<List<string>>();\n            MakeOrder(body, 2, sqlBlockLines);\n            sqlBlock.sqlBlockLines = sqlBlockLines;\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"リミット\", \"T\"}, {\"オフセット\", \"AB\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"LIMIT #{itemPerPage} OFFSET #{offset}\");\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ \"itemPerPage\" });\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ \"offset\" });\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(1) + \"</select>\");\n        }\n        \n        public void MakeInsertMultipleByKey(List<string> body, Param param, Table table, Dictionary<string, string> convertDic, SqlInfo sqlInfo)\n        {\n            sqlInfo.name = \"insertMultiple\" + UnderScoreCaseToCamelCase(table.tableID, true);\n            sqlInfo.returnType = \"\";\n            sqlInfo.parameterType = \"List<\" + param.GetOne(\"EntityPackage\") + \".\" + UnderScoreCaseToCamelCase(table.tableID, true) + \"Entity>\";\n            sqlInfo.sqlBlockList = new List<SqlBlock>();\n            SqlBlock sqlBlock;\n            \n            body.Add(MakeLevel(1) + \"<insert id=\\\"\" + sqlInfo.name + \"\\\">\");\n            \n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"作成対象\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"INSERT INTO\");\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル\" });\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"作成項目\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + table.tableID.ToUpper() + \" (\");\n            foreach (Column column in table.columnList)\n            {\n                sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル.\" + column.colName });\n                body.Add(MakeLevel(3) + column.colID.ToUpper() + \",\");\n            }\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            \n            body[body.Count - 1] = body[body.Count - 1].Remove(body[body.Count - 1].Length - 1);\n            body.Add(MakeLevel(2) + \") VALUES\");\n            body.Add(MakeLevel(2) + \"<foreach collection=\\\"list\\\" separator=\\\",\\\" item=\\\"entity\\\" open=\\\"(\\\" close=\\\")\\\">\");\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"項目値\", \"T\"}, {\"項目タイプ\", \"AB\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            foreach (Column column in table.columnList)\n            {\n                if (column.colID.ToUpper() == param.GetOne(\"UpdateTimeId\").ToUpper() || column.colID.ToUpper() == param.GetOne(\"CreateTimeId\").ToUpper())\n                {\n                    body.Add(MakeLevel(3) + GetNowTimestampStr(param) + \",\");\n                }\n                else\n                {\n                    string colStr = \"#{entity.\" + UnderScoreCaseToCamelCase(column.colID) + \"}\";\n                    colStr = ColumnApplyOption(convertDic, param, column, colStr, true);\n                    body.Add(MakeLevel(3) + colStr + \",\");\n                }\n            }\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ \"entity.作成項目\", \"一般項目\" });\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ GetNowTimestampStr(param), \"作成日時、修正日時\" });\n            body[body.Count - 1] = body[body.Count - 1].Remove(body[body.Count - 1].Length - 1);\n            body.Add(MakeLevel(2) + \"</foreach>\");\n            body.Add(MakeLevel(1) + \"</insert>\");\n        }\n        \n        public void MakeDeleteMultipleByKey(List<string> body, Param param, Table table, Dictionary<string, string> convertDic, SqlInfo sqlInfo)\n        {\n            sqlInfo.name = \"deleteMultiple\" + UnderScoreCaseToCamelCase(table.tableID, true);\n            sqlInfo.returnType = \"\";\n            sqlInfo.parameterType = \"List<\" + param.GetOne(\"EntityPackage\") + \".\" + UnderScoreCaseToCamelCase(table.tableID, true) + \"Entity>\";\n            sqlInfo.sqlBlockList = new List<SqlBlock>();\n            SqlBlock sqlBlock;\n            body.Add(MakeLevel(1) + \"<delete id=\\\"\" + sqlInfo.name + \"\\\">\");\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"削除対象\", \"T\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"DELETE FROM\");\n            sqlBlock.sqlBlockLines.Add(new List<string>(){ table.tableName + \"テーブル\" });\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(2) + table.tableID.ToUpper());\n            sqlBlock = new SqlBlock();\n            sqlBlock.sqlBlockColumnInfo = new Dictionary<string, string>(){{\"絞込条件項目\", \"T\"}, {\"比較条件\", \"AB\"}, {\"結合条件項目(テーブル識別名.結合カラム)\", \"AD\"}, {\"組合条件\", \"AL\"}, {\"必須\", \"AN\"}, {\"先決条件\", \"AP\"}, {\"対象DBカラム\", \"AR\"}};\n            sqlBlock.sqlBlockLines = new List<List<string>>();\n            body.Add(MakeLevel(2) + \"WHERE\");\n            body.Add(MakeLevel(2) + \"<foreach collection=\\\"list\\\" separator=\\\"or\\\" item=\\\"entity\\\" open=\\\"(\\\" close=\\\")\\\">\");\n            body.Add(MakeLevel(3) + \"1 = 1\");\n            foreach (Column column in table.columnList)\n            {\n                if (column.isPrimaryKey)\n                {\n                    body.Add(MakeTestHead(param, convertDic, column, 3, sqlBlock.sqlBlockLines));\n                    body.Add(MakeLeftEqualRight(convertDic, param, column, 4, \"AND \", table, sqlBlock.sqlBlockLines, false));\n                    body.Add(MakeLevel(3) + \"</if>\");\n                }\n            }\n            sqlInfo.sqlBlockList.Add(sqlBlock);\n            body.Add(MakeLevel(2) + \"</foreach>\");\n            body.Add(MakeLevel(1) + \"</delete>\");\n        }\n        \n        \n        \n        \n        /** CONVERT MAPPER INTO EXCEL START **************************************************************************************************/\n        public void ConvertMapperIntoExcel(Param param, XLWorkbook workbook, DesignBook designBook)\n        {\n            Logger.Info(param.GetOne(\"DefaultWorkbookPath\"));\n            \n            ForCopy.defaultSheet.Name = designBook.sheetName;\n            workbook.AddWorksheet(ForCopy.defaultSheet);\n            IXLWorksheet sheet = workbook.Worksheet(designBook.sheetName);\n            \n            sheet.Cell(\"J5\").SetValue(designBook.name);\n            sheet.Cell(\"H7\").SetValue(designBook.serviceClassName);\n            sheet.Cell(\"H11\").SetValue(designBook.classDiscription);\n            \n            int nowLine = 13;\n            \n            int sqlInfoIndex = 0;\n            foreach (SqlInfo sqlInfo in designBook.sqlInfoList)\n            {\n                ++sqlInfoIndex;\n                sheet.Cell(\"B\" + nowLine).SetValue(sqlInfoIndex);\n                ForCopy.forCopySheet1.Range(\"A1\", \"AX8\").CopyTo(sheet.Row(nowLine));\n                nowLine += 1;\n                sheet.Cell(\"H\" + nowLine).SetValue(sqlInfo.name);\n                nowLine += 1;\n                sheet.Cell(\"H\" + nowLine).SetValue(sqlInfo.discription);\n                nowLine += 2;\n                sheet.Cell(\"K\" + nowLine).SetValue(sqlInfo.returnType);\n                nowLine += 1;\n                sheet.Cell(\"K\" + nowLine).SetValue(sqlInfo.parameterType);\n                sheet.Cell(\"U\" + nowLine).SetValue(sqlInfo.parameterName);\n                sheet.Cell(\"AE\" + nowLine).SetValue(sqlInfo.parameterDiscription);\n                nowLine += 2;\n                sheet.Cell(\"R\" + nowLine).SetValue(sqlInfo.name);\n                \n                int sqlBlockIndex = 0;\n                foreach (SqlBlock sqlBlock in sqlInfo.sqlBlockList)\n                {\n                    ++sqlBlockIndex;\n                    Dictionary<string, string> sqlBlockColumnInfo = sqlBlock.sqlBlockColumnInfo;\n                    List<List<string>> sqlBlockLines = sqlBlock.sqlBlockLines;\n                    nowLine += 1;\n                    ForCopy.forCopySheet2.Range(\"A2\", \"AX2\").CopyTo(sheet.Row(nowLine));\n                    \n                    string nowCol = \"T\";\n                    List<int> cols = new List<int>();\n                    foreach(string key in sqlBlockColumnInfo.Keys)\n                    {\n                        nowCol = sqlBlockColumnInfo[key];\n                        sheet.Cell(nowCol + nowLine).SetValue(key);\n                        cols.Add(sheet.Column(nowCol).ColumnNumber());\n                    }\n                    for (int i = 0; i < cols.Count; ++i)\n                    {\n                        IXLRange range;\n                        if (cols.Count > i + 1)\n                        {\n                            range = sheet.Range(nowLine, cols[i], nowLine, cols[i + 1] - 1).Merge();\n                        }\n                        else\n                        {\n                            range = sheet.Range(nowLine, cols[i], nowLine, sheet.Column(\"AW\").ColumnNumber()).Merge();\n                        }\n                        range.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;\n                        range.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;\n                    }\n                    \n                    int lineIndex = 0;\n                    foreach(List<string> line in sqlBlockLines)\n                    {\n                        ++lineIndex;\n                        nowLine += 1;\n                        ForCopy.forCopySheet2.Range(\"A4\", \"AX4\").CopyTo(sheet.Row(nowLine));\n                        sheet.Cell(nowLine, 18).SetValue(lineIndex);\n                        nowCol = \"T\";\n                        int keyIndex = -1;\n                        foreach(string key in line)\n                        {\n                            ++keyIndex;\n                            sheet.Cell(nowLine, cols[keyIndex]).SetValue(key);\n                        }\n                        \n                        for (int i = 0; i < cols.Count; ++i)\n                        {\n                            IXLRange range;\n                            if (cols.Count > i + 1)\n                            {\n                                range = sheet.Range(nowLine, cols[i], nowLine, cols[i + 1] - 1).Merge();\n                            }\n                            else\n                            {\n                                range = sheet.Range(nowLine, cols[i], nowLine, sheet.Column(\"AW\").ColumnNumber()).Merge();\n                            }\n                            range.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;\n                            range.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;\n                        }\n                    }\n                }\n                sheet.Range(\"I\" + nowLine, \"AW\" + nowLine).Style.Border.BottomBorder = XLBorderStyleValues.Thin;\n                \n                nowLine += 1;\n                ForCopy.forCopySheet1.Range(\"A11\", \"AX11\").CopyTo(sheet.Row(nowLine));\n                nowLine += 1;\n            }\n        }\n    }\n}","paramDic":{"EntityPackage":{"describe":"Entity包名","possibleValues":null,"type":2},"MapperPackage":{"describe":"Mapper包名","possibleValues":null,"type":2},"DesignBookType":{"describe":"设计书类型","possibleValues":[{"value":"Postgresql","describe":null},{"value":"SqlServer","describe":null},{"value":"MySQL","describe":null},{"value":"Oracle","describe":null}],"type":1},"DatabaseType":{"describe":"数据库类型","possibleValues":[{"value":"Postgresql","describe":null},{"value":"SqlServer","describe":null},{"value":"MySQL","describe":null},{"value":"Oracle","describe":null}],"type":1},"TableIDPos":{"describe":"表物理名坐标","possibleValues":null,"type":2},"TableNamePos":{"describe":"表逻辑名坐标, 可空","possibleValues":null,"type":2},"StartRowNum":{"describe":"起始行数","possibleValues":null,"type":2},"ColIDCol":{"describe":"列物理名起始列","possibleValues":null,"type":2},"ColNameCol":{"describe":"列逻辑名起始列 可空","possibleValues":null,"type":2},"PrimaryKeyCol":{"describe":"主键, 可空","possibleValues":null,"type":2},"TypeCol":{"describe":"类型起始列","possibleValues":null,"type":2},"DigitsCheckCol":{"describe":"位数起始列, 可空","possibleValues":null,"type":2},"DecimalCheckCol":{"describe":"小数起始列, 可空","possibleValues":null,"type":2},"NullCheckCol":{"describe":"非空制约起始列, 可空","possibleValues":null,"type":2},"EnableValidate":{"describe":"验证注解","possibleValues":[{"value":"Yes","describe":"启用"}],"type":2},"CreateTimeId":{"describe":"创建时间列物理名, 可空","possibleValues":null,"type":2},"UpdateTimeId":{"describe":"修改时间列物理名, 可空","possibleValues":null,"type":2},"DeletedFlagId":{"describe":"逻辑删除判断列物理名, 可空","possibleValues":null,"type":2},"Option":{"describe":"选项","possibleValues":[{"value":"EnableTrim","describe":"Trim所有字符串"},{"value":"EnableFullWidthTrim","describe":"去除首尾全角空格"},{"value":"EmptyToNull","describe":"将空字符串转化为NULL"}],"type":2}},"globalizationSetter":{"currentLanguageName":null,"defaultLanguageName":null,"enableGlobalizationForParamSetter":false,"globalizationList":[]}}