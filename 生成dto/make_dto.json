{"name":"make_dto","code":"using ClosedXML.Excel;\r\nusing GlobalObjects;\r\nusing System;\r\nusing System.Collections.Concurrent;\r\nusing System.Collections.Generic;\r\nusing System.Text.RegularExpressions;\r\n\r\nnamespace AnalyzeCode\r\n{\r\n    class Analyze\r\n    {\r\n        /// <summary>\r\n        /// 在所有分析前调用\r\n        /// </summary>\r\n        /// <param name=\"paramDic\">传入的参数</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"allFilePathList\">将会分析的所有文件路径列表</param>\r\n        public void RunBeforeAnalyzeSheet(Dictionary<string, string> paramDic, ref Object globalObject, List<string> allFilePathList)\r\n        {\r\n            Dictionary<string, string> resDic = new Dictionary<string, string>();\r\n            globalObject = resDic;\r\n        }\r\n\r\n        /// <summary>\r\n        /// 分析一个sheet\r\n        /// </summary>\r\n        /// <param name=\"paramDic\">传入的参数</param>\r\n        /// <param name=\"sheet\">被分析的sheet</param>\r\n        /// <param name=\"result\">存储当前文件的信息 ResultType { (String) FILEPATH [文件路径], (String) FILENAME [文件名], (String) MESSAGE [当查找时出现问题时输出的消息], (Object) RESULTOBJECT [用户自定的分析结果] }</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"invokeCount\">此分析函数被调用的次数</param>\r\n        public void AnalyzeSheet(Dictionary<string, string> paramDic, IXLWorksheet sheet, ConcurrentDictionary<ResultType, Object> result, ref Object globalObject, int invokeCount)\r\n        {\r\n            Logger.Info(\"开始: \" + sheet.Name);\r\n        \r\n            IXLCells col1Cells = sheet.Column(1).CellsUsed();\r\n            IXLCells col2Cells = sheet.Column(2).CellsUsed();\r\n            IXLCells col3Cells = sheet.Column(3).CellsUsed();\r\n            \r\n            List<string> logicNames = new List<string>();\r\n            List<string> physicsNames = new List<string>();\r\n            List<string> types = new List<string>();\r\n            \r\n            foreach(IXLCell cell in col1Cells)\r\n            {\r\n                string logicName = cell.Value.ToString().Trim();\r\n                if(logicName != \"\")\r\n                {\r\n                    logicNames.Add(\"// \" + logicName);\r\n                }\r\n            }\r\n            foreach(IXLCell cell in col2Cells)\r\n            {\r\n                string physicsName = PieceString(cell.Value.ToString().Trim());\r\n                if(physicsName != \"\")\r\n                {\r\n                    physicsNames.Add(physicsName + \" = null;\");\r\n                }\r\n            }\r\n            foreach(IXLCell cell in col3Cells)\r\n            {\r\n                string type = cell.Value.ToString().Trim();\r\n                \r\n                type = Regex.Replace(type, \"[(][\\\\s\\\\S]*[)]\", \"\");\r\n                type = Regex.Replace(type, \"[\\\\s\\\\S]*char\", \"private String\");\r\n                type = Regex.Replace(type, \"datetime2\", \"private String\");\r\n                type = Regex.Replace(type, \"bigint\", \"private Long\");\r\n                type = Regex.Replace(type, \"numeric\", \"private BigDecimal\");\r\n                type = Regex.Replace(type, \"int\", \"private Integer\");\r\n                \r\n                if(type != \"\")\r\n                {\r\n                    types.Add(type);\r\n                }\r\n            }\r\n            \r\n            if(logicNames.Count == 0 || logicNames.Count != physicsNames.Count || physicsNames.Count != types.Count)\r\n            {\r\n                Logger.Error(\"Sheet \" + sheet.Name + \": 逻辑名, 物理名和类型行数不一致\");\r\n                return;\r\n            }\r\n            \r\n            int index = 0;\r\n            string resultStr = \"\";\r\n            while(index < logicNames.Count)\r\n            {\r\n                resultStr += logicNames[index] + \"\\n\" + types[index] + \" \" + physicsNames[index] + \"\\n\\n\";\r\n                ++index;\r\n            }\r\n            \r\n            ((Dictionary<string, string>)globalObject).Add(sheet.Name, resultStr.Trim());\r\n        }\r\n\r\n        /// <summary>\r\n        /// 在所有输出前调用\r\n        /// </summary>\r\n        /// <param name=\"paramDic\">传入的参数</param>\r\n        /// <param name=\"workbook\">用于输出的excel文件</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"resultList\">所有文件的信息</param>\r\n        /// <param name=\"allFilePathList\">分析的所有文件路径列表</param>\r\n        public void RunBeforeSetResult(Dictionary<string, string> paramDic, XLWorkbook workbook, ref Object globalObject, ICollection<ConcurrentDictionary<ResultType, Object>> resultList, List<string> allFilePathList)\r\n        {\r\n            \r\n        }\r\n\r\n        /// <summary>\r\n        /// 根据分析结果输出到excel中\r\n        /// </summary>\r\n        /// <param name=\"paramDic\">传入的参数</param>\r\n        /// <param name=\"workbook\">用于输出的excel文件</param>\r\n        /// <param name=\"result\">存储当前文件的信息 ResultType { (String) FILEPATH [文件路径], (String) FILENAME [文件名], (String) MESSAGE [当查找时出现问题时输出的消息], (Object) RESULTOBJECT [用户自定的分析结果] }</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"invokeCount\">此输出函数被调用的次数</param>\r\n        /// <param name=\"totalCount\">总共需要调用的输出函数的次数</param>\r\n        public void SetResult(Dictionary<string, string> paramDic, XLWorkbook workbook, ConcurrentDictionary<ResultType, Object> result, ref Object globalObject, int invokeCount, int totalCount)\r\n        {\r\n            \r\n        }\r\n\r\n        /// <summary>\r\n        /// 所有调用结束后调用\r\n        /// </summary>\r\n        /// <param name=\"paramDic\">传入的参数</param>\r\n        /// <param name=\"workbook\">用于输出的excel文件</param>\r\n        /// <param name=\"globalObject\">全局存在, 可以保存需要在其他调用时使用的数据, 如当前行号等</param>\r\n        /// <param name=\"resultList\">所有文件的信息</param>\r\n        /// <param name=\"allFilePathList\">分析的所有文件路径列表</param>\r\n        public void RunEnd(Dictionary<string, string> paramDic, XLWorkbook workbook, ref Object globalObject, ICollection<ConcurrentDictionary<ResultType, Object>> resultList, List<string> allFilePathList)\r\n        {\r\n            Dictionary<string, string> resDic = (Dictionary<string, string>)globalObject;\r\n            \r\n            foreach(string sheetName in resDic.Keys)\r\n            {\r\n                Logger.Info(\"生成: \" + sheetName);\r\n            \r\n                string resultStr = resDic[sheetName];\r\n                IXLWorksheet sheet = workbook.AddWorksheet(sheetName);\r\n                sheet.Cell(1, 1).SetValue(resultStr);\r\n                \r\n                int lineCount = resultStr.Length - resultStr.Replace(\"\\n\", \"\").Length + 1;\r\n                \r\n                sheet.Cell(1, 1).Style.Alignment.WrapText = true;\r\n                sheet.Columns().AdjustToContents(1, 1);\r\n                sheet.Row(1).Height = sheet.Row(1).Height * lineCount;\r\n            }\r\n        }\r\n        \r\n        \r\n        public string PieceString(string str)\r\n        {\r\n            str = str.ToLower();\r\n            string[] strItems = str.Split('_');\r\n            string strItemTarget = strItems[0];\r\n            for (int j = 1; j < strItems.Length; j++)\r\n            {\r\n                string temp = strItems[j].ToString();\r\n                string temp1 = temp[0].ToString().ToUpper();\r\n                string temp2 = temp1 + temp.Remove(0, 1);\r\n                strItemTarget += temp2;\r\n            }\r\n            return strItemTarget;\r\n        }\r\n    }\r\n}\r\n"}